type User {
  id: ID! @unique
  email: String! @unique
  name: String
  avatar: String
  # This is now the slack user ID
  slackHandle: String
  tasksCreated: [Task!]! @relation(name: "TaskCreatedByUser")
  tasksAssignedTo: [Task!]! @relation(name: "TaskAssignedToUser")
  commentsCreated: [Comment!]! @relation(name: "CommentCreatedByUser")
  role: Role! @default(value: STAFF)
  password: String
  resetToken: String @unique
  resetTokenExpiry: Float
  signupToken: String @unique
  signupTokenExpiry: Float
  status: UserStatus! @default(value: INVITED)
  subscribedTasks: [Task!]! @relation(name: "UserSubscribedToTask")
  mentions: [Comment!]! @relation(name: "UserMentionedInComment")
}

enum Role {
  SUPERADMIN,
  ADMIN,
  STAFF,
}

enum UserStatus {
  JOINED, 
  INVITED,
  DELETED
}

# get rid of dueWhenPossible and make due an enum
type Task { 
  id: ID! @unique
  createdBy: User! @relation(name: "TaskCreatedByUser")
  assignedTo: User @relation(name: "TaskAssignedToUser")
  title: String!
  description: String!
  assets: [Asset!]!
  taskList: TaskList!
  comments: [Comment!]!
  dueDate: DateTime
  due: TaskDue! @default(value: WHENPOSSIBLE)
  createdAt: DateTime!
  updatedAt: DateTime!
  customFields: [CustomField!]!
  status: TaskStatus! @default(value: CREATED)
  subscribedUsers: [User!]! @relation(name: "UserSubscribedToTask")
}

enum TaskStatus {
  CREATED,
  ASSIGNED,
  AWAITINGINPUT,
  COMPLETED, 
  CLOSED
}

enum TaskDue { 
  WHENPOSSIBLE,
  ASAP,
  BYDATE,
  ONDATE
}

type CustomField {
  id: ID! @unique
  # duplicate fieldName / if the categoryField is ever changed - don't want to update existing Tasks
  fieldName: String!, 
  fieldType: FieldType!,
  fieldValue: String!
  taskListField: TaskListField!
}

enum FieldType { 
  STRING,
  INT,
  DATE,
  ASSET
}

type TaskList {
  id: ID! @unique
  name: String! @unique
  description: String
  taskListFields: [TaskListField!]!
  tasks: [Task!]!
  slug: String! @unique
}

type TaskListField {
  id: ID! @unique
  fieldName: String!
  fieldType: FieldType!
  taskList: TaskList
}

type Comment {
  id: ID! @unique
  comment: String!
  createdBy: User! @relation(name: "CommentCreatedByUser")
  createdAt: DateTime!
  updatedAt: DateTime!
  assets: [Asset!]!
  task: Task!
  mentions: [User!]! @relation(name: "UserMentionedInComment")
}

type Asset {
  id: ID! @unique
  createdBy: User!
  title: String!
  assetUrl: String!
  createdAt: DateTime!
  assetType: AssetType!
}

enum AssetType {
  IMAGE,
  VIDEO,
  FILE
}

