// Code generated by Prisma (prisma@1.23.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  asset: (where?: AssetWhereInput) => Promise<boolean>;
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  customField: (where?: CustomFieldWhereInput) => Promise<boolean>;
  task: (where?: TaskWhereInput) => Promise<boolean>;
  taskList: (where?: TaskListWhereInput) => Promise<boolean>;
  taskListField: (where?: TaskListFieldWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  asset: (where: AssetWhereUniqueInput) => AssetPromise;
  assets: (
    args?: {
      where?: AssetWhereInput;
      orderBy?: AssetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Asset>;
  assetsConnection: (
    args?: {
      where?: AssetWhereInput;
      orderBy?: AssetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AssetConnectionPromise;
  comment: (where: CommentWhereUniqueInput) => CommentPromise;
  comments: (
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Comment>;
  commentsConnection: (
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CommentConnectionPromise;
  customField: (where: CustomFieldWhereUniqueInput) => CustomFieldPromise;
  customFields: (
    args?: {
      where?: CustomFieldWhereInput;
      orderBy?: CustomFieldOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CustomField>;
  customFieldsConnection: (
    args?: {
      where?: CustomFieldWhereInput;
      orderBy?: CustomFieldOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CustomFieldConnectionPromise;
  task: (where: TaskWhereUniqueInput) => TaskPromise;
  tasks: (
    args?: {
      where?: TaskWhereInput;
      orderBy?: TaskOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Task>;
  tasksConnection: (
    args?: {
      where?: TaskWhereInput;
      orderBy?: TaskOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TaskConnectionPromise;
  taskList: (where: TaskListWhereUniqueInput) => TaskListPromise;
  taskLists: (
    args?: {
      where?: TaskListWhereInput;
      orderBy?: TaskListOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<TaskList>;
  taskListsConnection: (
    args?: {
      where?: TaskListWhereInput;
      orderBy?: TaskListOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TaskListConnectionPromise;
  taskListField: (where: TaskListFieldWhereUniqueInput) => TaskListFieldPromise;
  taskListFields: (
    args?: {
      where?: TaskListFieldWhereInput;
      orderBy?: TaskListFieldOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<TaskListField>;
  taskListFieldsConnection: (
    args?: {
      where?: TaskListFieldWhereInput;
      orderBy?: TaskListFieldOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TaskListFieldConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAsset: (data: AssetCreateInput) => AssetPromise;
  updateAsset: (
    args: { data: AssetUpdateInput; where: AssetWhereUniqueInput }
  ) => AssetPromise;
  updateManyAssets: (
    args: { data: AssetUpdateManyMutationInput; where?: AssetWhereInput }
  ) => BatchPayloadPromise;
  upsertAsset: (
    args: {
      where: AssetWhereUniqueInput;
      create: AssetCreateInput;
      update: AssetUpdateInput;
    }
  ) => AssetPromise;
  deleteAsset: (where: AssetWhereUniqueInput) => AssetPromise;
  deleteManyAssets: (where?: AssetWhereInput) => BatchPayloadPromise;
  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (
    args: { data: CommentUpdateInput; where: CommentWhereUniqueInput }
  ) => CommentPromise;
  updateManyComments: (
    args: { data: CommentUpdateManyMutationInput; where?: CommentWhereInput }
  ) => BatchPayloadPromise;
  upsertComment: (
    args: {
      where: CommentWhereUniqueInput;
      create: CommentCreateInput;
      update: CommentUpdateInput;
    }
  ) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createCustomField: (data: CustomFieldCreateInput) => CustomFieldPromise;
  updateCustomField: (
    args: { data: CustomFieldUpdateInput; where: CustomFieldWhereUniqueInput }
  ) => CustomFieldPromise;
  updateManyCustomFields: (
    args: {
      data: CustomFieldUpdateManyMutationInput;
      where?: CustomFieldWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCustomField: (
    args: {
      where: CustomFieldWhereUniqueInput;
      create: CustomFieldCreateInput;
      update: CustomFieldUpdateInput;
    }
  ) => CustomFieldPromise;
  deleteCustomField: (where: CustomFieldWhereUniqueInput) => CustomFieldPromise;
  deleteManyCustomFields: (
    where?: CustomFieldWhereInput
  ) => BatchPayloadPromise;
  createTask: (data: TaskCreateInput) => TaskPromise;
  updateTask: (
    args: { data: TaskUpdateInput; where: TaskWhereUniqueInput }
  ) => TaskPromise;
  updateManyTasks: (
    args: { data: TaskUpdateManyMutationInput; where?: TaskWhereInput }
  ) => BatchPayloadPromise;
  upsertTask: (
    args: {
      where: TaskWhereUniqueInput;
      create: TaskCreateInput;
      update: TaskUpdateInput;
    }
  ) => TaskPromise;
  deleteTask: (where: TaskWhereUniqueInput) => TaskPromise;
  deleteManyTasks: (where?: TaskWhereInput) => BatchPayloadPromise;
  createTaskList: (data: TaskListCreateInput) => TaskListPromise;
  updateTaskList: (
    args: { data: TaskListUpdateInput; where: TaskListWhereUniqueInput }
  ) => TaskListPromise;
  updateManyTaskLists: (
    args: { data: TaskListUpdateManyMutationInput; where?: TaskListWhereInput }
  ) => BatchPayloadPromise;
  upsertTaskList: (
    args: {
      where: TaskListWhereUniqueInput;
      create: TaskListCreateInput;
      update: TaskListUpdateInput;
    }
  ) => TaskListPromise;
  deleteTaskList: (where: TaskListWhereUniqueInput) => TaskListPromise;
  deleteManyTaskLists: (where?: TaskListWhereInput) => BatchPayloadPromise;
  createTaskListField: (data: TaskListFieldCreateInput) => TaskListFieldPromise;
  updateTaskListField: (
    args: {
      data: TaskListFieldUpdateInput;
      where: TaskListFieldWhereUniqueInput;
    }
  ) => TaskListFieldPromise;
  updateManyTaskListFields: (
    args: {
      data: TaskListFieldUpdateManyMutationInput;
      where?: TaskListFieldWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertTaskListField: (
    args: {
      where: TaskListFieldWhereUniqueInput;
      create: TaskListFieldCreateInput;
      update: TaskListFieldUpdateInput;
    }
  ) => TaskListFieldPromise;
  deleteTaskListField: (
    where: TaskListFieldWhereUniqueInput
  ) => TaskListFieldPromise;
  deleteManyTaskListFields: (
    where?: TaskListFieldWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  asset: (
    where?: AssetSubscriptionWhereInput
  ) => AssetSubscriptionPayloadSubscription;
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  customField: (
    where?: CustomFieldSubscriptionWhereInput
  ) => CustomFieldSubscriptionPayloadSubscription;
  task: (
    where?: TaskSubscriptionWhereInput
  ) => TaskSubscriptionPayloadSubscription;
  taskList: (
    where?: TaskListSubscriptionWhereInput
  ) => TaskListSubscriptionPayloadSubscription;
  taskListField: (
    where?: TaskListFieldSubscriptionWhereInput
  ) => TaskListFieldSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AssetType = "IMAGE" | "VIDEO" | "FILE";

export type Role = "SUPERADMIN" | "ADMIN" | "STAFF";

export type UserStatus = "JOINED" | "INVITED" | "DELETED";

export type FieldType = "STRING" | "INT" | "DATE" | "ASSET";

export type TaskDue = "WHENPOSSIBLE" | "ASAP" | "BYDATE" | "ONDATE";

export type TaskStatus =
  | "CREATED"
  | "ASSIGNED"
  | "AWAITINGINPUT"
  | "COMPLETED"
  | "CLOSED";

export type TaskOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "dueDate_ASC"
  | "dueDate_DESC"
  | "due_ASC"
  | "due_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "status_ASC"
  | "status_DESC";

export type AssetOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "assetUrl_ASC"
  | "assetUrl_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "assetType_ASC"
  | "assetType_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TaskListFieldOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "fieldName_ASC"
  | "fieldName_DESC"
  | "fieldType_ASC"
  | "fieldType_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "comment_ASC"
  | "comment_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "slackHandle_ASC"
  | "slackHandle_DESC"
  | "role_ASC"
  | "role_DESC"
  | "password_ASC"
  | "password_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "resetTokenExpiry_ASC"
  | "resetTokenExpiry_DESC"
  | "signupToken_ASC"
  | "signupToken_DESC"
  | "signupTokenExpiry_ASC"
  | "signupTokenExpiry_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CustomFieldOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "fieldName_ASC"
  | "fieldName_DESC"
  | "fieldType_ASC"
  | "fieldType_DESC"
  | "fieldValue_ASC"
  | "fieldValue_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TaskListOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AssetWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface TaskWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdBy?: UserWhereInput;
  assignedTo?: UserWhereInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  assets_every?: AssetWhereInput;
  assets_some?: AssetWhereInput;
  assets_none?: AssetWhereInput;
  taskList?: TaskListWhereInput;
  comments_every?: CommentWhereInput;
  comments_some?: CommentWhereInput;
  comments_none?: CommentWhereInput;
  dueDate?: DateTimeInput;
  dueDate_not?: DateTimeInput;
  dueDate_in?: DateTimeInput[] | DateTimeInput;
  dueDate_not_in?: DateTimeInput[] | DateTimeInput;
  dueDate_lt?: DateTimeInput;
  dueDate_lte?: DateTimeInput;
  dueDate_gt?: DateTimeInput;
  dueDate_gte?: DateTimeInput;
  due?: TaskDue;
  due_not?: TaskDue;
  due_in?: TaskDue[] | TaskDue;
  due_not_in?: TaskDue[] | TaskDue;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  customFields_every?: CustomFieldWhereInput;
  customFields_some?: CustomFieldWhereInput;
  customFields_none?: CustomFieldWhereInput;
  status?: TaskStatus;
  status_not?: TaskStatus;
  status_in?: TaskStatus[] | TaskStatus;
  status_not_in?: TaskStatus[] | TaskStatus;
  subscribedUsers_every?: UserWhereInput;
  subscribedUsers_some?: UserWhereInput;
  subscribedUsers_none?: UserWhereInput;
  AND?: TaskWhereInput[] | TaskWhereInput;
  OR?: TaskWhereInput[] | TaskWhereInput;
  NOT?: TaskWhereInput[] | TaskWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  avatar?: String;
  avatar_not?: String;
  avatar_in?: String[] | String;
  avatar_not_in?: String[] | String;
  avatar_lt?: String;
  avatar_lte?: String;
  avatar_gt?: String;
  avatar_gte?: String;
  avatar_contains?: String;
  avatar_not_contains?: String;
  avatar_starts_with?: String;
  avatar_not_starts_with?: String;
  avatar_ends_with?: String;
  avatar_not_ends_with?: String;
  slackHandle?: String;
  slackHandle_not?: String;
  slackHandle_in?: String[] | String;
  slackHandle_not_in?: String[] | String;
  slackHandle_lt?: String;
  slackHandle_lte?: String;
  slackHandle_gt?: String;
  slackHandle_gte?: String;
  slackHandle_contains?: String;
  slackHandle_not_contains?: String;
  slackHandle_starts_with?: String;
  slackHandle_not_starts_with?: String;
  slackHandle_ends_with?: String;
  slackHandle_not_ends_with?: String;
  tasksCreated_every?: TaskWhereInput;
  tasksCreated_some?: TaskWhereInput;
  tasksCreated_none?: TaskWhereInput;
  tasksAssignedTo_every?: TaskWhereInput;
  tasksAssignedTo_some?: TaskWhereInput;
  tasksAssignedTo_none?: TaskWhereInput;
  commentsCreated_every?: CommentWhereInput;
  commentsCreated_some?: CommentWhereInput;
  commentsCreated_none?: CommentWhereInput;
  role?: Role;
  role_not?: Role;
  role_in?: Role[] | Role;
  role_not_in?: Role[] | Role;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  resetToken?: String;
  resetToken_not?: String;
  resetToken_in?: String[] | String;
  resetToken_not_in?: String[] | String;
  resetToken_lt?: String;
  resetToken_lte?: String;
  resetToken_gt?: String;
  resetToken_gte?: String;
  resetToken_contains?: String;
  resetToken_not_contains?: String;
  resetToken_starts_with?: String;
  resetToken_not_starts_with?: String;
  resetToken_ends_with?: String;
  resetToken_not_ends_with?: String;
  resetTokenExpiry?: Float;
  resetTokenExpiry_not?: Float;
  resetTokenExpiry_in?: Float[] | Float;
  resetTokenExpiry_not_in?: Float[] | Float;
  resetTokenExpiry_lt?: Float;
  resetTokenExpiry_lte?: Float;
  resetTokenExpiry_gt?: Float;
  resetTokenExpiry_gte?: Float;
  signupToken?: String;
  signupToken_not?: String;
  signupToken_in?: String[] | String;
  signupToken_not_in?: String[] | String;
  signupToken_lt?: String;
  signupToken_lte?: String;
  signupToken_gt?: String;
  signupToken_gte?: String;
  signupToken_contains?: String;
  signupToken_not_contains?: String;
  signupToken_starts_with?: String;
  signupToken_not_starts_with?: String;
  signupToken_ends_with?: String;
  signupToken_not_ends_with?: String;
  signupTokenExpiry?: Float;
  signupTokenExpiry_not?: Float;
  signupTokenExpiry_in?: Float[] | Float;
  signupTokenExpiry_not_in?: Float[] | Float;
  signupTokenExpiry_lt?: Float;
  signupTokenExpiry_lte?: Float;
  signupTokenExpiry_gt?: Float;
  signupTokenExpiry_gte?: Float;
  status?: UserStatus;
  status_not?: UserStatus;
  status_in?: UserStatus[] | UserStatus;
  status_not_in?: UserStatus[] | UserStatus;
  subscribedTasks_every?: TaskWhereInput;
  subscribedTasks_some?: TaskWhereInput;
  subscribedTasks_none?: TaskWhereInput;
  mentions_every?: CommentWhereInput;
  mentions_some?: CommentWhereInput;
  mentions_none?: CommentWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface CommentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  comment?: String;
  comment_not?: String;
  comment_in?: String[] | String;
  comment_not_in?: String[] | String;
  comment_lt?: String;
  comment_lte?: String;
  comment_gt?: String;
  comment_gte?: String;
  comment_contains?: String;
  comment_not_contains?: String;
  comment_starts_with?: String;
  comment_not_starts_with?: String;
  comment_ends_with?: String;
  comment_not_ends_with?: String;
  createdBy?: UserWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  assets_every?: AssetWhereInput;
  assets_some?: AssetWhereInput;
  assets_none?: AssetWhereInput;
  task?: TaskWhereInput;
  mentions_every?: UserWhereInput;
  mentions_some?: UserWhereInput;
  mentions_none?: UserWhereInput;
  AND?: CommentWhereInput[] | CommentWhereInput;
  OR?: CommentWhereInput[] | CommentWhereInput;
  NOT?: CommentWhereInput[] | CommentWhereInput;
}

export interface AssetWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdBy?: UserWhereInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  assetUrl?: String;
  assetUrl_not?: String;
  assetUrl_in?: String[] | String;
  assetUrl_not_in?: String[] | String;
  assetUrl_lt?: String;
  assetUrl_lte?: String;
  assetUrl_gt?: String;
  assetUrl_gte?: String;
  assetUrl_contains?: String;
  assetUrl_not_contains?: String;
  assetUrl_starts_with?: String;
  assetUrl_not_starts_with?: String;
  assetUrl_ends_with?: String;
  assetUrl_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  assetType?: AssetType;
  assetType_not?: AssetType;
  assetType_in?: AssetType[] | AssetType;
  assetType_not_in?: AssetType[] | AssetType;
  AND?: AssetWhereInput[] | AssetWhereInput;
  OR?: AssetWhereInput[] | AssetWhereInput;
  NOT?: AssetWhereInput[] | AssetWhereInput;
}

export interface TaskListWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  taskListFields_every?: TaskListFieldWhereInput;
  taskListFields_some?: TaskListFieldWhereInput;
  taskListFields_none?: TaskListFieldWhereInput;
  tasks_every?: TaskWhereInput;
  tasks_some?: TaskWhereInput;
  tasks_none?: TaskWhereInput;
  slug?: String;
  slug_not?: String;
  slug_in?: String[] | String;
  slug_not_in?: String[] | String;
  slug_lt?: String;
  slug_lte?: String;
  slug_gt?: String;
  slug_gte?: String;
  slug_contains?: String;
  slug_not_contains?: String;
  slug_starts_with?: String;
  slug_not_starts_with?: String;
  slug_ends_with?: String;
  slug_not_ends_with?: String;
  AND?: TaskListWhereInput[] | TaskListWhereInput;
  OR?: TaskListWhereInput[] | TaskListWhereInput;
  NOT?: TaskListWhereInput[] | TaskListWhereInput;
}

export interface TaskListFieldWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  fieldName?: String;
  fieldName_not?: String;
  fieldName_in?: String[] | String;
  fieldName_not_in?: String[] | String;
  fieldName_lt?: String;
  fieldName_lte?: String;
  fieldName_gt?: String;
  fieldName_gte?: String;
  fieldName_contains?: String;
  fieldName_not_contains?: String;
  fieldName_starts_with?: String;
  fieldName_not_starts_with?: String;
  fieldName_ends_with?: String;
  fieldName_not_ends_with?: String;
  fieldType?: FieldType;
  fieldType_not?: FieldType;
  fieldType_in?: FieldType[] | FieldType;
  fieldType_not_in?: FieldType[] | FieldType;
  taskList?: TaskListWhereInput;
  AND?: TaskListFieldWhereInput[] | TaskListFieldWhereInput;
  OR?: TaskListFieldWhereInput[] | TaskListFieldWhereInput;
  NOT?: TaskListFieldWhereInput[] | TaskListFieldWhereInput;
}

export interface CustomFieldWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  fieldName?: String;
  fieldName_not?: String;
  fieldName_in?: String[] | String;
  fieldName_not_in?: String[] | String;
  fieldName_lt?: String;
  fieldName_lte?: String;
  fieldName_gt?: String;
  fieldName_gte?: String;
  fieldName_contains?: String;
  fieldName_not_contains?: String;
  fieldName_starts_with?: String;
  fieldName_not_starts_with?: String;
  fieldName_ends_with?: String;
  fieldName_not_ends_with?: String;
  fieldType?: FieldType;
  fieldType_not?: FieldType;
  fieldType_in?: FieldType[] | FieldType;
  fieldType_not_in?: FieldType[] | FieldType;
  fieldValue?: String;
  fieldValue_not?: String;
  fieldValue_in?: String[] | String;
  fieldValue_not_in?: String[] | String;
  fieldValue_lt?: String;
  fieldValue_lte?: String;
  fieldValue_gt?: String;
  fieldValue_gte?: String;
  fieldValue_contains?: String;
  fieldValue_not_contains?: String;
  fieldValue_starts_with?: String;
  fieldValue_not_starts_with?: String;
  fieldValue_ends_with?: String;
  fieldValue_not_ends_with?: String;
  taskListField?: TaskListFieldWhereInput;
  AND?: CustomFieldWhereInput[] | CustomFieldWhereInput;
  OR?: CustomFieldWhereInput[] | CustomFieldWhereInput;
  NOT?: CustomFieldWhereInput[] | CustomFieldWhereInput;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type CustomFieldWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type TaskWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type TaskListWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
  slug?: String;
}>;

export type TaskListFieldWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
  resetToken?: String;
  signupToken?: String;
}>;

export interface AssetCreateInput {
  createdBy: UserCreateOneInput;
  title: String;
  assetUrl: String;
  assetType: AssetType;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateInput {
  email: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  tasksCreated?: TaskCreateManyWithoutCreatedByInput;
  tasksAssignedTo?: TaskCreateManyWithoutAssignedToInput;
  commentsCreated?: CommentCreateManyWithoutCreatedByInput;
  role?: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status?: UserStatus;
  subscribedTasks?: TaskCreateManyWithoutSubscribedUsersInput;
  mentions?: CommentCreateManyWithoutMentionsInput;
}

export interface TaskCreateManyWithoutCreatedByInput {
  create?: TaskCreateWithoutCreatedByInput[] | TaskCreateWithoutCreatedByInput;
  connect?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
}

export interface TaskCreateWithoutCreatedByInput {
  assignedTo?: UserCreateOneWithoutTasksAssignedToInput;
  title: String;
  description: String;
  assets?: AssetCreateManyInput;
  taskList: TaskListCreateOneWithoutTasksInput;
  comments?: CommentCreateManyWithoutTaskInput;
  dueDate?: DateTimeInput;
  due?: TaskDue;
  customFields?: CustomFieldCreateManyInput;
  status?: TaskStatus;
  subscribedUsers?: UserCreateManyWithoutSubscribedTasksInput;
}

export interface UserCreateOneWithoutTasksAssignedToInput {
  create?: UserCreateWithoutTasksAssignedToInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutTasksAssignedToInput {
  email: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  tasksCreated?: TaskCreateManyWithoutCreatedByInput;
  commentsCreated?: CommentCreateManyWithoutCreatedByInput;
  role?: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status?: UserStatus;
  subscribedTasks?: TaskCreateManyWithoutSubscribedUsersInput;
  mentions?: CommentCreateManyWithoutMentionsInput;
}

export interface CommentCreateManyWithoutCreatedByInput {
  create?:
    | CommentCreateWithoutCreatedByInput[]
    | CommentCreateWithoutCreatedByInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
}

export interface CommentCreateWithoutCreatedByInput {
  comment: String;
  assets?: AssetCreateManyInput;
  task: TaskCreateOneWithoutCommentsInput;
  mentions?: UserCreateManyWithoutMentionsInput;
}

export interface AssetCreateManyInput {
  create?: AssetCreateInput[] | AssetCreateInput;
  connect?: AssetWhereUniqueInput[] | AssetWhereUniqueInput;
}

export interface TaskCreateOneWithoutCommentsInput {
  create?: TaskCreateWithoutCommentsInput;
  connect?: TaskWhereUniqueInput;
}

export interface TaskCreateWithoutCommentsInput {
  createdBy: UserCreateOneWithoutTasksCreatedInput;
  assignedTo?: UserCreateOneWithoutTasksAssignedToInput;
  title: String;
  description: String;
  assets?: AssetCreateManyInput;
  taskList: TaskListCreateOneWithoutTasksInput;
  dueDate?: DateTimeInput;
  due?: TaskDue;
  customFields?: CustomFieldCreateManyInput;
  status?: TaskStatus;
  subscribedUsers?: UserCreateManyWithoutSubscribedTasksInput;
}

export interface UserCreateOneWithoutTasksCreatedInput {
  create?: UserCreateWithoutTasksCreatedInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutTasksCreatedInput {
  email: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  tasksAssignedTo?: TaskCreateManyWithoutAssignedToInput;
  commentsCreated?: CommentCreateManyWithoutCreatedByInput;
  role?: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status?: UserStatus;
  subscribedTasks?: TaskCreateManyWithoutSubscribedUsersInput;
  mentions?: CommentCreateManyWithoutMentionsInput;
}

export interface TaskCreateManyWithoutAssignedToInput {
  create?:
    | TaskCreateWithoutAssignedToInput[]
    | TaskCreateWithoutAssignedToInput;
  connect?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
}

export interface TaskCreateWithoutAssignedToInput {
  createdBy: UserCreateOneWithoutTasksCreatedInput;
  title: String;
  description: String;
  assets?: AssetCreateManyInput;
  taskList: TaskListCreateOneWithoutTasksInput;
  comments?: CommentCreateManyWithoutTaskInput;
  dueDate?: DateTimeInput;
  due?: TaskDue;
  customFields?: CustomFieldCreateManyInput;
  status?: TaskStatus;
  subscribedUsers?: UserCreateManyWithoutSubscribedTasksInput;
}

export interface TaskListCreateOneWithoutTasksInput {
  create?: TaskListCreateWithoutTasksInput;
  connect?: TaskListWhereUniqueInput;
}

export interface TaskListCreateWithoutTasksInput {
  name: String;
  description?: String;
  taskListFields?: TaskListFieldCreateManyWithoutTaskListInput;
  slug: String;
}

export interface TaskListFieldCreateManyWithoutTaskListInput {
  create?:
    | TaskListFieldCreateWithoutTaskListInput[]
    | TaskListFieldCreateWithoutTaskListInput;
  connect?: TaskListFieldWhereUniqueInput[] | TaskListFieldWhereUniqueInput;
}

export interface TaskListFieldCreateWithoutTaskListInput {
  fieldName: String;
  fieldType: FieldType;
}

export interface CommentCreateManyWithoutTaskInput {
  create?: CommentCreateWithoutTaskInput[] | CommentCreateWithoutTaskInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
}

export interface CommentCreateWithoutTaskInput {
  comment: String;
  createdBy: UserCreateOneWithoutCommentsCreatedInput;
  assets?: AssetCreateManyInput;
  mentions?: UserCreateManyWithoutMentionsInput;
}

export interface UserCreateOneWithoutCommentsCreatedInput {
  create?: UserCreateWithoutCommentsCreatedInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutCommentsCreatedInput {
  email: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  tasksCreated?: TaskCreateManyWithoutCreatedByInput;
  tasksAssignedTo?: TaskCreateManyWithoutAssignedToInput;
  role?: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status?: UserStatus;
  subscribedTasks?: TaskCreateManyWithoutSubscribedUsersInput;
  mentions?: CommentCreateManyWithoutMentionsInput;
}

export interface TaskCreateManyWithoutSubscribedUsersInput {
  create?:
    | TaskCreateWithoutSubscribedUsersInput[]
    | TaskCreateWithoutSubscribedUsersInput;
  connect?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
}

export interface TaskCreateWithoutSubscribedUsersInput {
  createdBy: UserCreateOneWithoutTasksCreatedInput;
  assignedTo?: UserCreateOneWithoutTasksAssignedToInput;
  title: String;
  description: String;
  assets?: AssetCreateManyInput;
  taskList: TaskListCreateOneWithoutTasksInput;
  comments?: CommentCreateManyWithoutTaskInput;
  dueDate?: DateTimeInput;
  due?: TaskDue;
  customFields?: CustomFieldCreateManyInput;
  status?: TaskStatus;
}

export interface CustomFieldCreateManyInput {
  create?: CustomFieldCreateInput[] | CustomFieldCreateInput;
  connect?: CustomFieldWhereUniqueInput[] | CustomFieldWhereUniqueInput;
}

export interface CustomFieldCreateInput {
  fieldName: String;
  fieldType: FieldType;
  fieldValue: String;
  taskListField: TaskListFieldCreateOneInput;
}

export interface TaskListFieldCreateOneInput {
  create?: TaskListFieldCreateInput;
  connect?: TaskListFieldWhereUniqueInput;
}

export interface TaskListFieldCreateInput {
  fieldName: String;
  fieldType: FieldType;
  taskList?: TaskListCreateOneWithoutTaskListFieldsInput;
}

export interface TaskListCreateOneWithoutTaskListFieldsInput {
  create?: TaskListCreateWithoutTaskListFieldsInput;
  connect?: TaskListWhereUniqueInput;
}

export interface TaskListCreateWithoutTaskListFieldsInput {
  name: String;
  description?: String;
  tasks?: TaskCreateManyWithoutTaskListInput;
  slug: String;
}

export interface TaskCreateManyWithoutTaskListInput {
  create?: TaskCreateWithoutTaskListInput[] | TaskCreateWithoutTaskListInput;
  connect?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
}

export interface TaskCreateWithoutTaskListInput {
  createdBy: UserCreateOneWithoutTasksCreatedInput;
  assignedTo?: UserCreateOneWithoutTasksAssignedToInput;
  title: String;
  description: String;
  assets?: AssetCreateManyInput;
  comments?: CommentCreateManyWithoutTaskInput;
  dueDate?: DateTimeInput;
  due?: TaskDue;
  customFields?: CustomFieldCreateManyInput;
  status?: TaskStatus;
  subscribedUsers?: UserCreateManyWithoutSubscribedTasksInput;
}

export interface UserCreateManyWithoutSubscribedTasksInput {
  create?:
    | UserCreateWithoutSubscribedTasksInput[]
    | UserCreateWithoutSubscribedTasksInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateWithoutSubscribedTasksInput {
  email: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  tasksCreated?: TaskCreateManyWithoutCreatedByInput;
  tasksAssignedTo?: TaskCreateManyWithoutAssignedToInput;
  commentsCreated?: CommentCreateManyWithoutCreatedByInput;
  role?: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status?: UserStatus;
  mentions?: CommentCreateManyWithoutMentionsInput;
}

export interface CommentCreateManyWithoutMentionsInput {
  create?:
    | CommentCreateWithoutMentionsInput[]
    | CommentCreateWithoutMentionsInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
}

export interface CommentCreateWithoutMentionsInput {
  comment: String;
  createdBy: UserCreateOneWithoutCommentsCreatedInput;
  assets?: AssetCreateManyInput;
  task: TaskCreateOneWithoutCommentsInput;
}

export interface UserCreateManyWithoutMentionsInput {
  create?: UserCreateWithoutMentionsInput[] | UserCreateWithoutMentionsInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateWithoutMentionsInput {
  email: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  tasksCreated?: TaskCreateManyWithoutCreatedByInput;
  tasksAssignedTo?: TaskCreateManyWithoutAssignedToInput;
  commentsCreated?: CommentCreateManyWithoutCreatedByInput;
  role?: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status?: UserStatus;
  subscribedTasks?: TaskCreateManyWithoutSubscribedUsersInput;
}

export interface AssetUpdateInput {
  createdBy?: UserUpdateOneRequiredInput;
  title?: String;
  assetUrl?: String;
  assetType?: AssetType;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateDataInput {
  email?: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  tasksCreated?: TaskUpdateManyWithoutCreatedByInput;
  tasksAssignedTo?: TaskUpdateManyWithoutAssignedToInput;
  commentsCreated?: CommentUpdateManyWithoutCreatedByInput;
  role?: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status?: UserStatus;
  subscribedTasks?: TaskUpdateManyWithoutSubscribedUsersInput;
  mentions?: CommentUpdateManyWithoutMentionsInput;
}

export interface TaskUpdateManyWithoutCreatedByInput {
  create?: TaskCreateWithoutCreatedByInput[] | TaskCreateWithoutCreatedByInput;
  delete?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
  connect?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
  disconnect?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
  update?:
    | TaskUpdateWithWhereUniqueWithoutCreatedByInput[]
    | TaskUpdateWithWhereUniqueWithoutCreatedByInput;
  upsert?:
    | TaskUpsertWithWhereUniqueWithoutCreatedByInput[]
    | TaskUpsertWithWhereUniqueWithoutCreatedByInput;
  deleteMany?: TaskScalarWhereInput[] | TaskScalarWhereInput;
  updateMany?:
    | TaskUpdateManyWithWhereNestedInput[]
    | TaskUpdateManyWithWhereNestedInput;
}

export interface TaskUpdateWithWhereUniqueWithoutCreatedByInput {
  where: TaskWhereUniqueInput;
  data: TaskUpdateWithoutCreatedByDataInput;
}

export interface TaskUpdateWithoutCreatedByDataInput {
  assignedTo?: UserUpdateOneWithoutTasksAssignedToInput;
  title?: String;
  description?: String;
  assets?: AssetUpdateManyInput;
  taskList?: TaskListUpdateOneRequiredWithoutTasksInput;
  comments?: CommentUpdateManyWithoutTaskInput;
  dueDate?: DateTimeInput;
  due?: TaskDue;
  customFields?: CustomFieldUpdateManyInput;
  status?: TaskStatus;
  subscribedUsers?: UserUpdateManyWithoutSubscribedTasksInput;
}

export interface UserUpdateOneWithoutTasksAssignedToInput {
  create?: UserCreateWithoutTasksAssignedToInput;
  update?: UserUpdateWithoutTasksAssignedToDataInput;
  upsert?: UserUpsertWithoutTasksAssignedToInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutTasksAssignedToDataInput {
  email?: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  tasksCreated?: TaskUpdateManyWithoutCreatedByInput;
  commentsCreated?: CommentUpdateManyWithoutCreatedByInput;
  role?: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status?: UserStatus;
  subscribedTasks?: TaskUpdateManyWithoutSubscribedUsersInput;
  mentions?: CommentUpdateManyWithoutMentionsInput;
}

export interface CommentUpdateManyWithoutCreatedByInput {
  create?:
    | CommentCreateWithoutCreatedByInput[]
    | CommentCreateWithoutCreatedByInput;
  delete?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  disconnect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  update?:
    | CommentUpdateWithWhereUniqueWithoutCreatedByInput[]
    | CommentUpdateWithWhereUniqueWithoutCreatedByInput;
  upsert?:
    | CommentUpsertWithWhereUniqueWithoutCreatedByInput[]
    | CommentUpsertWithWhereUniqueWithoutCreatedByInput;
  deleteMany?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  updateMany?:
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput;
}

export interface CommentUpdateWithWhereUniqueWithoutCreatedByInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutCreatedByDataInput;
}

export interface CommentUpdateWithoutCreatedByDataInput {
  comment?: String;
  assets?: AssetUpdateManyInput;
  task?: TaskUpdateOneRequiredWithoutCommentsInput;
  mentions?: UserUpdateManyWithoutMentionsInput;
}

export interface AssetUpdateManyInput {
  create?: AssetCreateInput[] | AssetCreateInput;
  update?:
    | AssetUpdateWithWhereUniqueNestedInput[]
    | AssetUpdateWithWhereUniqueNestedInput;
  upsert?:
    | AssetUpsertWithWhereUniqueNestedInput[]
    | AssetUpsertWithWhereUniqueNestedInput;
  delete?: AssetWhereUniqueInput[] | AssetWhereUniqueInput;
  connect?: AssetWhereUniqueInput[] | AssetWhereUniqueInput;
  disconnect?: AssetWhereUniqueInput[] | AssetWhereUniqueInput;
  deleteMany?: AssetScalarWhereInput[] | AssetScalarWhereInput;
  updateMany?:
    | AssetUpdateManyWithWhereNestedInput[]
    | AssetUpdateManyWithWhereNestedInput;
}

export interface AssetUpdateWithWhereUniqueNestedInput {
  where: AssetWhereUniqueInput;
  data: AssetUpdateDataInput;
}

export interface AssetUpdateDataInput {
  createdBy?: UserUpdateOneRequiredInput;
  title?: String;
  assetUrl?: String;
  assetType?: AssetType;
}

export interface AssetUpsertWithWhereUniqueNestedInput {
  where: AssetWhereUniqueInput;
  update: AssetUpdateDataInput;
  create: AssetCreateInput;
}

export interface AssetScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  assetUrl?: String;
  assetUrl_not?: String;
  assetUrl_in?: String[] | String;
  assetUrl_not_in?: String[] | String;
  assetUrl_lt?: String;
  assetUrl_lte?: String;
  assetUrl_gt?: String;
  assetUrl_gte?: String;
  assetUrl_contains?: String;
  assetUrl_not_contains?: String;
  assetUrl_starts_with?: String;
  assetUrl_not_starts_with?: String;
  assetUrl_ends_with?: String;
  assetUrl_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  assetType?: AssetType;
  assetType_not?: AssetType;
  assetType_in?: AssetType[] | AssetType;
  assetType_not_in?: AssetType[] | AssetType;
  AND?: AssetScalarWhereInput[] | AssetScalarWhereInput;
  OR?: AssetScalarWhereInput[] | AssetScalarWhereInput;
  NOT?: AssetScalarWhereInput[] | AssetScalarWhereInput;
}

export interface AssetUpdateManyWithWhereNestedInput {
  where: AssetScalarWhereInput;
  data: AssetUpdateManyDataInput;
}

export interface AssetUpdateManyDataInput {
  title?: String;
  assetUrl?: String;
  assetType?: AssetType;
}

export interface TaskUpdateOneRequiredWithoutCommentsInput {
  create?: TaskCreateWithoutCommentsInput;
  update?: TaskUpdateWithoutCommentsDataInput;
  upsert?: TaskUpsertWithoutCommentsInput;
  connect?: TaskWhereUniqueInput;
}

export interface TaskUpdateWithoutCommentsDataInput {
  createdBy?: UserUpdateOneRequiredWithoutTasksCreatedInput;
  assignedTo?: UserUpdateOneWithoutTasksAssignedToInput;
  title?: String;
  description?: String;
  assets?: AssetUpdateManyInput;
  taskList?: TaskListUpdateOneRequiredWithoutTasksInput;
  dueDate?: DateTimeInput;
  due?: TaskDue;
  customFields?: CustomFieldUpdateManyInput;
  status?: TaskStatus;
  subscribedUsers?: UserUpdateManyWithoutSubscribedTasksInput;
}

export interface UserUpdateOneRequiredWithoutTasksCreatedInput {
  create?: UserCreateWithoutTasksCreatedInput;
  update?: UserUpdateWithoutTasksCreatedDataInput;
  upsert?: UserUpsertWithoutTasksCreatedInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutTasksCreatedDataInput {
  email?: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  tasksAssignedTo?: TaskUpdateManyWithoutAssignedToInput;
  commentsCreated?: CommentUpdateManyWithoutCreatedByInput;
  role?: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status?: UserStatus;
  subscribedTasks?: TaskUpdateManyWithoutSubscribedUsersInput;
  mentions?: CommentUpdateManyWithoutMentionsInput;
}

export interface TaskUpdateManyWithoutAssignedToInput {
  create?:
    | TaskCreateWithoutAssignedToInput[]
    | TaskCreateWithoutAssignedToInput;
  delete?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
  connect?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
  disconnect?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
  update?:
    | TaskUpdateWithWhereUniqueWithoutAssignedToInput[]
    | TaskUpdateWithWhereUniqueWithoutAssignedToInput;
  upsert?:
    | TaskUpsertWithWhereUniqueWithoutAssignedToInput[]
    | TaskUpsertWithWhereUniqueWithoutAssignedToInput;
  deleteMany?: TaskScalarWhereInput[] | TaskScalarWhereInput;
  updateMany?:
    | TaskUpdateManyWithWhereNestedInput[]
    | TaskUpdateManyWithWhereNestedInput;
}

export interface TaskUpdateWithWhereUniqueWithoutAssignedToInput {
  where: TaskWhereUniqueInput;
  data: TaskUpdateWithoutAssignedToDataInput;
}

export interface TaskUpdateWithoutAssignedToDataInput {
  createdBy?: UserUpdateOneRequiredWithoutTasksCreatedInput;
  title?: String;
  description?: String;
  assets?: AssetUpdateManyInput;
  taskList?: TaskListUpdateOneRequiredWithoutTasksInput;
  comments?: CommentUpdateManyWithoutTaskInput;
  dueDate?: DateTimeInput;
  due?: TaskDue;
  customFields?: CustomFieldUpdateManyInput;
  status?: TaskStatus;
  subscribedUsers?: UserUpdateManyWithoutSubscribedTasksInput;
}

export interface TaskListUpdateOneRequiredWithoutTasksInput {
  create?: TaskListCreateWithoutTasksInput;
  update?: TaskListUpdateWithoutTasksDataInput;
  upsert?: TaskListUpsertWithoutTasksInput;
  connect?: TaskListWhereUniqueInput;
}

export interface TaskListUpdateWithoutTasksDataInput {
  name?: String;
  description?: String;
  taskListFields?: TaskListFieldUpdateManyWithoutTaskListInput;
  slug?: String;
}

export interface TaskListFieldUpdateManyWithoutTaskListInput {
  create?:
    | TaskListFieldCreateWithoutTaskListInput[]
    | TaskListFieldCreateWithoutTaskListInput;
  delete?: TaskListFieldWhereUniqueInput[] | TaskListFieldWhereUniqueInput;
  connect?: TaskListFieldWhereUniqueInput[] | TaskListFieldWhereUniqueInput;
  disconnect?: TaskListFieldWhereUniqueInput[] | TaskListFieldWhereUniqueInput;
  update?:
    | TaskListFieldUpdateWithWhereUniqueWithoutTaskListInput[]
    | TaskListFieldUpdateWithWhereUniqueWithoutTaskListInput;
  upsert?:
    | TaskListFieldUpsertWithWhereUniqueWithoutTaskListInput[]
    | TaskListFieldUpsertWithWhereUniqueWithoutTaskListInput;
  deleteMany?: TaskListFieldScalarWhereInput[] | TaskListFieldScalarWhereInput;
  updateMany?:
    | TaskListFieldUpdateManyWithWhereNestedInput[]
    | TaskListFieldUpdateManyWithWhereNestedInput;
}

export interface TaskListFieldUpdateWithWhereUniqueWithoutTaskListInput {
  where: TaskListFieldWhereUniqueInput;
  data: TaskListFieldUpdateWithoutTaskListDataInput;
}

export interface TaskListFieldUpdateWithoutTaskListDataInput {
  fieldName?: String;
  fieldType?: FieldType;
}

export interface TaskListFieldUpsertWithWhereUniqueWithoutTaskListInput {
  where: TaskListFieldWhereUniqueInput;
  update: TaskListFieldUpdateWithoutTaskListDataInput;
  create: TaskListFieldCreateWithoutTaskListInput;
}

export interface TaskListFieldScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  fieldName?: String;
  fieldName_not?: String;
  fieldName_in?: String[] | String;
  fieldName_not_in?: String[] | String;
  fieldName_lt?: String;
  fieldName_lte?: String;
  fieldName_gt?: String;
  fieldName_gte?: String;
  fieldName_contains?: String;
  fieldName_not_contains?: String;
  fieldName_starts_with?: String;
  fieldName_not_starts_with?: String;
  fieldName_ends_with?: String;
  fieldName_not_ends_with?: String;
  fieldType?: FieldType;
  fieldType_not?: FieldType;
  fieldType_in?: FieldType[] | FieldType;
  fieldType_not_in?: FieldType[] | FieldType;
  AND?: TaskListFieldScalarWhereInput[] | TaskListFieldScalarWhereInput;
  OR?: TaskListFieldScalarWhereInput[] | TaskListFieldScalarWhereInput;
  NOT?: TaskListFieldScalarWhereInput[] | TaskListFieldScalarWhereInput;
}

export interface TaskListFieldUpdateManyWithWhereNestedInput {
  where: TaskListFieldScalarWhereInput;
  data: TaskListFieldUpdateManyDataInput;
}

export interface TaskListFieldUpdateManyDataInput {
  fieldName?: String;
  fieldType?: FieldType;
}

export interface TaskListUpsertWithoutTasksInput {
  update: TaskListUpdateWithoutTasksDataInput;
  create: TaskListCreateWithoutTasksInput;
}

export interface CommentUpdateManyWithoutTaskInput {
  create?: CommentCreateWithoutTaskInput[] | CommentCreateWithoutTaskInput;
  delete?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  disconnect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  update?:
    | CommentUpdateWithWhereUniqueWithoutTaskInput[]
    | CommentUpdateWithWhereUniqueWithoutTaskInput;
  upsert?:
    | CommentUpsertWithWhereUniqueWithoutTaskInput[]
    | CommentUpsertWithWhereUniqueWithoutTaskInput;
  deleteMany?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  updateMany?:
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput;
}

export interface CommentUpdateWithWhereUniqueWithoutTaskInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutTaskDataInput;
}

export interface CommentUpdateWithoutTaskDataInput {
  comment?: String;
  createdBy?: UserUpdateOneRequiredWithoutCommentsCreatedInput;
  assets?: AssetUpdateManyInput;
  mentions?: UserUpdateManyWithoutMentionsInput;
}

export interface UserUpdateOneRequiredWithoutCommentsCreatedInput {
  create?: UserCreateWithoutCommentsCreatedInput;
  update?: UserUpdateWithoutCommentsCreatedDataInput;
  upsert?: UserUpsertWithoutCommentsCreatedInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutCommentsCreatedDataInput {
  email?: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  tasksCreated?: TaskUpdateManyWithoutCreatedByInput;
  tasksAssignedTo?: TaskUpdateManyWithoutAssignedToInput;
  role?: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status?: UserStatus;
  subscribedTasks?: TaskUpdateManyWithoutSubscribedUsersInput;
  mentions?: CommentUpdateManyWithoutMentionsInput;
}

export interface TaskUpdateManyWithoutSubscribedUsersInput {
  create?:
    | TaskCreateWithoutSubscribedUsersInput[]
    | TaskCreateWithoutSubscribedUsersInput;
  delete?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
  connect?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
  disconnect?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
  update?:
    | TaskUpdateWithWhereUniqueWithoutSubscribedUsersInput[]
    | TaskUpdateWithWhereUniqueWithoutSubscribedUsersInput;
  upsert?:
    | TaskUpsertWithWhereUniqueWithoutSubscribedUsersInput[]
    | TaskUpsertWithWhereUniqueWithoutSubscribedUsersInput;
  deleteMany?: TaskScalarWhereInput[] | TaskScalarWhereInput;
  updateMany?:
    | TaskUpdateManyWithWhereNestedInput[]
    | TaskUpdateManyWithWhereNestedInput;
}

export interface TaskUpdateWithWhereUniqueWithoutSubscribedUsersInput {
  where: TaskWhereUniqueInput;
  data: TaskUpdateWithoutSubscribedUsersDataInput;
}

export interface TaskUpdateWithoutSubscribedUsersDataInput {
  createdBy?: UserUpdateOneRequiredWithoutTasksCreatedInput;
  assignedTo?: UserUpdateOneWithoutTasksAssignedToInput;
  title?: String;
  description?: String;
  assets?: AssetUpdateManyInput;
  taskList?: TaskListUpdateOneRequiredWithoutTasksInput;
  comments?: CommentUpdateManyWithoutTaskInput;
  dueDate?: DateTimeInput;
  due?: TaskDue;
  customFields?: CustomFieldUpdateManyInput;
  status?: TaskStatus;
}

export interface CustomFieldUpdateManyInput {
  create?: CustomFieldCreateInput[] | CustomFieldCreateInput;
  update?:
    | CustomFieldUpdateWithWhereUniqueNestedInput[]
    | CustomFieldUpdateWithWhereUniqueNestedInput;
  upsert?:
    | CustomFieldUpsertWithWhereUniqueNestedInput[]
    | CustomFieldUpsertWithWhereUniqueNestedInput;
  delete?: CustomFieldWhereUniqueInput[] | CustomFieldWhereUniqueInput;
  connect?: CustomFieldWhereUniqueInput[] | CustomFieldWhereUniqueInput;
  disconnect?: CustomFieldWhereUniqueInput[] | CustomFieldWhereUniqueInput;
  deleteMany?: CustomFieldScalarWhereInput[] | CustomFieldScalarWhereInput;
  updateMany?:
    | CustomFieldUpdateManyWithWhereNestedInput[]
    | CustomFieldUpdateManyWithWhereNestedInput;
}

export interface CustomFieldUpdateWithWhereUniqueNestedInput {
  where: CustomFieldWhereUniqueInput;
  data: CustomFieldUpdateDataInput;
}

export interface CustomFieldUpdateDataInput {
  fieldName?: String;
  fieldType?: FieldType;
  fieldValue?: String;
  taskListField?: TaskListFieldUpdateOneRequiredInput;
}

export interface TaskListFieldUpdateOneRequiredInput {
  create?: TaskListFieldCreateInput;
  update?: TaskListFieldUpdateDataInput;
  upsert?: TaskListFieldUpsertNestedInput;
  connect?: TaskListFieldWhereUniqueInput;
}

export interface TaskListFieldUpdateDataInput {
  fieldName?: String;
  fieldType?: FieldType;
  taskList?: TaskListUpdateOneWithoutTaskListFieldsInput;
}

export interface TaskListUpdateOneWithoutTaskListFieldsInput {
  create?: TaskListCreateWithoutTaskListFieldsInput;
  update?: TaskListUpdateWithoutTaskListFieldsDataInput;
  upsert?: TaskListUpsertWithoutTaskListFieldsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: TaskListWhereUniqueInput;
}

export interface TaskListUpdateWithoutTaskListFieldsDataInput {
  name?: String;
  description?: String;
  tasks?: TaskUpdateManyWithoutTaskListInput;
  slug?: String;
}

export interface TaskUpdateManyWithoutTaskListInput {
  create?: TaskCreateWithoutTaskListInput[] | TaskCreateWithoutTaskListInput;
  delete?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
  connect?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
  disconnect?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
  update?:
    | TaskUpdateWithWhereUniqueWithoutTaskListInput[]
    | TaskUpdateWithWhereUniqueWithoutTaskListInput;
  upsert?:
    | TaskUpsertWithWhereUniqueWithoutTaskListInput[]
    | TaskUpsertWithWhereUniqueWithoutTaskListInput;
  deleteMany?: TaskScalarWhereInput[] | TaskScalarWhereInput;
  updateMany?:
    | TaskUpdateManyWithWhereNestedInput[]
    | TaskUpdateManyWithWhereNestedInput;
}

export interface TaskUpdateWithWhereUniqueWithoutTaskListInput {
  where: TaskWhereUniqueInput;
  data: TaskUpdateWithoutTaskListDataInput;
}

export interface TaskUpdateWithoutTaskListDataInput {
  createdBy?: UserUpdateOneRequiredWithoutTasksCreatedInput;
  assignedTo?: UserUpdateOneWithoutTasksAssignedToInput;
  title?: String;
  description?: String;
  assets?: AssetUpdateManyInput;
  comments?: CommentUpdateManyWithoutTaskInput;
  dueDate?: DateTimeInput;
  due?: TaskDue;
  customFields?: CustomFieldUpdateManyInput;
  status?: TaskStatus;
  subscribedUsers?: UserUpdateManyWithoutSubscribedTasksInput;
}

export interface UserUpdateManyWithoutSubscribedTasksInput {
  create?:
    | UserCreateWithoutSubscribedTasksInput[]
    | UserCreateWithoutSubscribedTasksInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutSubscribedTasksInput[]
    | UserUpdateWithWhereUniqueWithoutSubscribedTasksInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutSubscribedTasksInput[]
    | UserUpsertWithWhereUniqueWithoutSubscribedTasksInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueWithoutSubscribedTasksInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutSubscribedTasksDataInput;
}

export interface UserUpdateWithoutSubscribedTasksDataInput {
  email?: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  tasksCreated?: TaskUpdateManyWithoutCreatedByInput;
  tasksAssignedTo?: TaskUpdateManyWithoutAssignedToInput;
  commentsCreated?: CommentUpdateManyWithoutCreatedByInput;
  role?: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status?: UserStatus;
  mentions?: CommentUpdateManyWithoutMentionsInput;
}

export interface CommentUpdateManyWithoutMentionsInput {
  create?:
    | CommentCreateWithoutMentionsInput[]
    | CommentCreateWithoutMentionsInput;
  delete?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  disconnect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  update?:
    | CommentUpdateWithWhereUniqueWithoutMentionsInput[]
    | CommentUpdateWithWhereUniqueWithoutMentionsInput;
  upsert?:
    | CommentUpsertWithWhereUniqueWithoutMentionsInput[]
    | CommentUpsertWithWhereUniqueWithoutMentionsInput;
  deleteMany?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  updateMany?:
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput;
}

export interface CommentUpdateWithWhereUniqueWithoutMentionsInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutMentionsDataInput;
}

export interface CommentUpdateWithoutMentionsDataInput {
  comment?: String;
  createdBy?: UserUpdateOneRequiredWithoutCommentsCreatedInput;
  assets?: AssetUpdateManyInput;
  task?: TaskUpdateOneRequiredWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutMentionsInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutMentionsDataInput;
  create: CommentCreateWithoutMentionsInput;
}

export interface CommentScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  comment?: String;
  comment_not?: String;
  comment_in?: String[] | String;
  comment_not_in?: String[] | String;
  comment_lt?: String;
  comment_lte?: String;
  comment_gt?: String;
  comment_gte?: String;
  comment_contains?: String;
  comment_not_contains?: String;
  comment_starts_with?: String;
  comment_not_starts_with?: String;
  comment_ends_with?: String;
  comment_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  OR?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  NOT?: CommentScalarWhereInput[] | CommentScalarWhereInput;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface CommentUpdateManyDataInput {
  comment?: String;
}

export interface UserUpsertWithWhereUniqueWithoutSubscribedTasksInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutSubscribedTasksDataInput;
  create: UserCreateWithoutSubscribedTasksInput;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  avatar?: String;
  avatar_not?: String;
  avatar_in?: String[] | String;
  avatar_not_in?: String[] | String;
  avatar_lt?: String;
  avatar_lte?: String;
  avatar_gt?: String;
  avatar_gte?: String;
  avatar_contains?: String;
  avatar_not_contains?: String;
  avatar_starts_with?: String;
  avatar_not_starts_with?: String;
  avatar_ends_with?: String;
  avatar_not_ends_with?: String;
  slackHandle?: String;
  slackHandle_not?: String;
  slackHandle_in?: String[] | String;
  slackHandle_not_in?: String[] | String;
  slackHandle_lt?: String;
  slackHandle_lte?: String;
  slackHandle_gt?: String;
  slackHandle_gte?: String;
  slackHandle_contains?: String;
  slackHandle_not_contains?: String;
  slackHandle_starts_with?: String;
  slackHandle_not_starts_with?: String;
  slackHandle_ends_with?: String;
  slackHandle_not_ends_with?: String;
  role?: Role;
  role_not?: Role;
  role_in?: Role[] | Role;
  role_not_in?: Role[] | Role;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  resetToken?: String;
  resetToken_not?: String;
  resetToken_in?: String[] | String;
  resetToken_not_in?: String[] | String;
  resetToken_lt?: String;
  resetToken_lte?: String;
  resetToken_gt?: String;
  resetToken_gte?: String;
  resetToken_contains?: String;
  resetToken_not_contains?: String;
  resetToken_starts_with?: String;
  resetToken_not_starts_with?: String;
  resetToken_ends_with?: String;
  resetToken_not_ends_with?: String;
  resetTokenExpiry?: Float;
  resetTokenExpiry_not?: Float;
  resetTokenExpiry_in?: Float[] | Float;
  resetTokenExpiry_not_in?: Float[] | Float;
  resetTokenExpiry_lt?: Float;
  resetTokenExpiry_lte?: Float;
  resetTokenExpiry_gt?: Float;
  resetTokenExpiry_gte?: Float;
  signupToken?: String;
  signupToken_not?: String;
  signupToken_in?: String[] | String;
  signupToken_not_in?: String[] | String;
  signupToken_lt?: String;
  signupToken_lte?: String;
  signupToken_gt?: String;
  signupToken_gte?: String;
  signupToken_contains?: String;
  signupToken_not_contains?: String;
  signupToken_starts_with?: String;
  signupToken_not_starts_with?: String;
  signupToken_ends_with?: String;
  signupToken_not_ends_with?: String;
  signupTokenExpiry?: Float;
  signupTokenExpiry_not?: Float;
  signupTokenExpiry_in?: Float[] | Float;
  signupTokenExpiry_not_in?: Float[] | Float;
  signupTokenExpiry_lt?: Float;
  signupTokenExpiry_lte?: Float;
  signupTokenExpiry_gt?: Float;
  signupTokenExpiry_gte?: Float;
  status?: UserStatus;
  status_not?: UserStatus;
  status_in?: UserStatus[] | UserStatus;
  status_not_in?: UserStatus[] | UserStatus;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  email?: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  role?: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status?: UserStatus;
}

export interface TaskUpsertWithWhereUniqueWithoutTaskListInput {
  where: TaskWhereUniqueInput;
  update: TaskUpdateWithoutTaskListDataInput;
  create: TaskCreateWithoutTaskListInput;
}

export interface TaskScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  dueDate?: DateTimeInput;
  dueDate_not?: DateTimeInput;
  dueDate_in?: DateTimeInput[] | DateTimeInput;
  dueDate_not_in?: DateTimeInput[] | DateTimeInput;
  dueDate_lt?: DateTimeInput;
  dueDate_lte?: DateTimeInput;
  dueDate_gt?: DateTimeInput;
  dueDate_gte?: DateTimeInput;
  due?: TaskDue;
  due_not?: TaskDue;
  due_in?: TaskDue[] | TaskDue;
  due_not_in?: TaskDue[] | TaskDue;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  status?: TaskStatus;
  status_not?: TaskStatus;
  status_in?: TaskStatus[] | TaskStatus;
  status_not_in?: TaskStatus[] | TaskStatus;
  AND?: TaskScalarWhereInput[] | TaskScalarWhereInput;
  OR?: TaskScalarWhereInput[] | TaskScalarWhereInput;
  NOT?: TaskScalarWhereInput[] | TaskScalarWhereInput;
}

export interface TaskUpdateManyWithWhereNestedInput {
  where: TaskScalarWhereInput;
  data: TaskUpdateManyDataInput;
}

export interface TaskUpdateManyDataInput {
  title?: String;
  description?: String;
  dueDate?: DateTimeInput;
  due?: TaskDue;
  status?: TaskStatus;
}

export interface TaskListUpsertWithoutTaskListFieldsInput {
  update: TaskListUpdateWithoutTaskListFieldsDataInput;
  create: TaskListCreateWithoutTaskListFieldsInput;
}

export interface TaskListFieldUpsertNestedInput {
  update: TaskListFieldUpdateDataInput;
  create: TaskListFieldCreateInput;
}

export interface CustomFieldUpsertWithWhereUniqueNestedInput {
  where: CustomFieldWhereUniqueInput;
  update: CustomFieldUpdateDataInput;
  create: CustomFieldCreateInput;
}

export interface CustomFieldScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  fieldName?: String;
  fieldName_not?: String;
  fieldName_in?: String[] | String;
  fieldName_not_in?: String[] | String;
  fieldName_lt?: String;
  fieldName_lte?: String;
  fieldName_gt?: String;
  fieldName_gte?: String;
  fieldName_contains?: String;
  fieldName_not_contains?: String;
  fieldName_starts_with?: String;
  fieldName_not_starts_with?: String;
  fieldName_ends_with?: String;
  fieldName_not_ends_with?: String;
  fieldType?: FieldType;
  fieldType_not?: FieldType;
  fieldType_in?: FieldType[] | FieldType;
  fieldType_not_in?: FieldType[] | FieldType;
  fieldValue?: String;
  fieldValue_not?: String;
  fieldValue_in?: String[] | String;
  fieldValue_not_in?: String[] | String;
  fieldValue_lt?: String;
  fieldValue_lte?: String;
  fieldValue_gt?: String;
  fieldValue_gte?: String;
  fieldValue_contains?: String;
  fieldValue_not_contains?: String;
  fieldValue_starts_with?: String;
  fieldValue_not_starts_with?: String;
  fieldValue_ends_with?: String;
  fieldValue_not_ends_with?: String;
  AND?: CustomFieldScalarWhereInput[] | CustomFieldScalarWhereInput;
  OR?: CustomFieldScalarWhereInput[] | CustomFieldScalarWhereInput;
  NOT?: CustomFieldScalarWhereInput[] | CustomFieldScalarWhereInput;
}

export interface CustomFieldUpdateManyWithWhereNestedInput {
  where: CustomFieldScalarWhereInput;
  data: CustomFieldUpdateManyDataInput;
}

export interface CustomFieldUpdateManyDataInput {
  fieldName?: String;
  fieldType?: FieldType;
  fieldValue?: String;
}

export interface TaskUpsertWithWhereUniqueWithoutSubscribedUsersInput {
  where: TaskWhereUniqueInput;
  update: TaskUpdateWithoutSubscribedUsersDataInput;
  create: TaskCreateWithoutSubscribedUsersInput;
}

export interface UserUpsertWithoutCommentsCreatedInput {
  update: UserUpdateWithoutCommentsCreatedDataInput;
  create: UserCreateWithoutCommentsCreatedInput;
}

export interface UserUpdateManyWithoutMentionsInput {
  create?: UserCreateWithoutMentionsInput[] | UserCreateWithoutMentionsInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutMentionsInput[]
    | UserUpdateWithWhereUniqueWithoutMentionsInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutMentionsInput[]
    | UserUpsertWithWhereUniqueWithoutMentionsInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueWithoutMentionsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutMentionsDataInput;
}

export interface UserUpdateWithoutMentionsDataInput {
  email?: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  tasksCreated?: TaskUpdateManyWithoutCreatedByInput;
  tasksAssignedTo?: TaskUpdateManyWithoutAssignedToInput;
  commentsCreated?: CommentUpdateManyWithoutCreatedByInput;
  role?: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status?: UserStatus;
  subscribedTasks?: TaskUpdateManyWithoutSubscribedUsersInput;
}

export interface UserUpsertWithWhereUniqueWithoutMentionsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutMentionsDataInput;
  create: UserCreateWithoutMentionsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutTaskInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutTaskDataInput;
  create: CommentCreateWithoutTaskInput;
}

export interface TaskUpsertWithWhereUniqueWithoutAssignedToInput {
  where: TaskWhereUniqueInput;
  update: TaskUpdateWithoutAssignedToDataInput;
  create: TaskCreateWithoutAssignedToInput;
}

export interface UserUpsertWithoutTasksCreatedInput {
  update: UserUpdateWithoutTasksCreatedDataInput;
  create: UserCreateWithoutTasksCreatedInput;
}

export interface TaskUpsertWithoutCommentsInput {
  update: TaskUpdateWithoutCommentsDataInput;
  create: TaskCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutCreatedByInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutCreatedByDataInput;
  create: CommentCreateWithoutCreatedByInput;
}

export interface UserUpsertWithoutTasksAssignedToInput {
  update: UserUpdateWithoutTasksAssignedToDataInput;
  create: UserCreateWithoutTasksAssignedToInput;
}

export interface TaskUpsertWithWhereUniqueWithoutCreatedByInput {
  where: TaskWhereUniqueInput;
  update: TaskUpdateWithoutCreatedByDataInput;
  create: TaskCreateWithoutCreatedByInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface AssetUpdateManyMutationInput {
  title?: String;
  assetUrl?: String;
  assetType?: AssetType;
}

export interface CommentCreateInput {
  comment: String;
  createdBy: UserCreateOneWithoutCommentsCreatedInput;
  assets?: AssetCreateManyInput;
  task: TaskCreateOneWithoutCommentsInput;
  mentions?: UserCreateManyWithoutMentionsInput;
}

export interface CommentUpdateInput {
  comment?: String;
  createdBy?: UserUpdateOneRequiredWithoutCommentsCreatedInput;
  assets?: AssetUpdateManyInput;
  task?: TaskUpdateOneRequiredWithoutCommentsInput;
  mentions?: UserUpdateManyWithoutMentionsInput;
}

export interface CommentUpdateManyMutationInput {
  comment?: String;
}

export interface CustomFieldUpdateInput {
  fieldName?: String;
  fieldType?: FieldType;
  fieldValue?: String;
  taskListField?: TaskListFieldUpdateOneRequiredInput;
}

export interface CustomFieldUpdateManyMutationInput {
  fieldName?: String;
  fieldType?: FieldType;
  fieldValue?: String;
}

export interface TaskCreateInput {
  createdBy: UserCreateOneWithoutTasksCreatedInput;
  assignedTo?: UserCreateOneWithoutTasksAssignedToInput;
  title: String;
  description: String;
  assets?: AssetCreateManyInput;
  taskList: TaskListCreateOneWithoutTasksInput;
  comments?: CommentCreateManyWithoutTaskInput;
  dueDate?: DateTimeInput;
  due?: TaskDue;
  customFields?: CustomFieldCreateManyInput;
  status?: TaskStatus;
  subscribedUsers?: UserCreateManyWithoutSubscribedTasksInput;
}

export interface TaskUpdateInput {
  createdBy?: UserUpdateOneRequiredWithoutTasksCreatedInput;
  assignedTo?: UserUpdateOneWithoutTasksAssignedToInput;
  title?: String;
  description?: String;
  assets?: AssetUpdateManyInput;
  taskList?: TaskListUpdateOneRequiredWithoutTasksInput;
  comments?: CommentUpdateManyWithoutTaskInput;
  dueDate?: DateTimeInput;
  due?: TaskDue;
  customFields?: CustomFieldUpdateManyInput;
  status?: TaskStatus;
  subscribedUsers?: UserUpdateManyWithoutSubscribedTasksInput;
}

export interface TaskUpdateManyMutationInput {
  title?: String;
  description?: String;
  dueDate?: DateTimeInput;
  due?: TaskDue;
  status?: TaskStatus;
}

export interface TaskListCreateInput {
  name: String;
  description?: String;
  taskListFields?: TaskListFieldCreateManyWithoutTaskListInput;
  tasks?: TaskCreateManyWithoutTaskListInput;
  slug: String;
}

export interface TaskListUpdateInput {
  name?: String;
  description?: String;
  taskListFields?: TaskListFieldUpdateManyWithoutTaskListInput;
  tasks?: TaskUpdateManyWithoutTaskListInput;
  slug?: String;
}

export interface TaskListUpdateManyMutationInput {
  name?: String;
  description?: String;
  slug?: String;
}

export interface TaskListFieldUpdateInput {
  fieldName?: String;
  fieldType?: FieldType;
  taskList?: TaskListUpdateOneWithoutTaskListFieldsInput;
}

export interface TaskListFieldUpdateManyMutationInput {
  fieldName?: String;
  fieldType?: FieldType;
}

export interface UserUpdateInput {
  email?: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  tasksCreated?: TaskUpdateManyWithoutCreatedByInput;
  tasksAssignedTo?: TaskUpdateManyWithoutAssignedToInput;
  commentsCreated?: CommentUpdateManyWithoutCreatedByInput;
  role?: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status?: UserStatus;
  subscribedTasks?: TaskUpdateManyWithoutSubscribedUsersInput;
  mentions?: CommentUpdateManyWithoutMentionsInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  role?: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status?: UserStatus;
}

export interface AssetSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AssetWhereInput;
  AND?: AssetSubscriptionWhereInput[] | AssetSubscriptionWhereInput;
  OR?: AssetSubscriptionWhereInput[] | AssetSubscriptionWhereInput;
  NOT?: AssetSubscriptionWhereInput[] | AssetSubscriptionWhereInput;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CommentWhereInput;
  AND?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
  OR?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
  NOT?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
}

export interface CustomFieldSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CustomFieldWhereInput;
  AND?: CustomFieldSubscriptionWhereInput[] | CustomFieldSubscriptionWhereInput;
  OR?: CustomFieldSubscriptionWhereInput[] | CustomFieldSubscriptionWhereInput;
  NOT?: CustomFieldSubscriptionWhereInput[] | CustomFieldSubscriptionWhereInput;
}

export interface TaskSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TaskWhereInput;
  AND?: TaskSubscriptionWhereInput[] | TaskSubscriptionWhereInput;
  OR?: TaskSubscriptionWhereInput[] | TaskSubscriptionWhereInput;
  NOT?: TaskSubscriptionWhereInput[] | TaskSubscriptionWhereInput;
}

export interface TaskListSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TaskListWhereInput;
  AND?: TaskListSubscriptionWhereInput[] | TaskListSubscriptionWhereInput;
  OR?: TaskListSubscriptionWhereInput[] | TaskListSubscriptionWhereInput;
  NOT?: TaskListSubscriptionWhereInput[] | TaskListSubscriptionWhereInput;
}

export interface TaskListFieldSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TaskListFieldWhereInput;
  AND?:
    | TaskListFieldSubscriptionWhereInput[]
    | TaskListFieldSubscriptionWhereInput;
  OR?:
    | TaskListFieldSubscriptionWhereInput[]
    | TaskListFieldSubscriptionWhereInput;
  NOT?:
    | TaskListFieldSubscriptionWhereInput[]
    | TaskListFieldSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Asset {
  id: ID_Output;
  title: String;
  assetUrl: String;
  createdAt: DateTimeOutput;
  assetType: AssetType;
}

export interface AssetPromise extends Promise<Asset>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdBy: <T = UserPromise>() => T;
  title: () => Promise<String>;
  assetUrl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  assetType: () => Promise<AssetType>;
}

export interface AssetSubscription
  extends Promise<AsyncIterator<Asset>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdBy: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  assetUrl: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  assetType: () => Promise<AsyncIterator<AssetType>>;
}

export interface User {
  id: ID_Output;
  email: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  role: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status: UserStatus;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  slackHandle: () => Promise<String>;
  tasksCreated: <T = FragmentableArray<Task>>(
    args?: {
      where?: TaskWhereInput;
      orderBy?: TaskOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  tasksAssignedTo: <T = FragmentableArray<Task>>(
    args?: {
      where?: TaskWhereInput;
      orderBy?: TaskOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  commentsCreated: <T = FragmentableArray<Comment>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  role: () => Promise<Role>;
  password: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  signupToken: () => Promise<String>;
  signupTokenExpiry: () => Promise<Float>;
  status: () => Promise<UserStatus>;
  subscribedTasks: <T = FragmentableArray<Task>>(
    args?: {
      where?: TaskWhereInput;
      orderBy?: TaskOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  mentions: <T = FragmentableArray<Comment>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  slackHandle: () => Promise<AsyncIterator<String>>;
  tasksCreated: <T = Promise<AsyncIterator<TaskSubscription>>>(
    args?: {
      where?: TaskWhereInput;
      orderBy?: TaskOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  tasksAssignedTo: <T = Promise<AsyncIterator<TaskSubscription>>>(
    args?: {
      where?: TaskWhereInput;
      orderBy?: TaskOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  commentsCreated: <T = Promise<AsyncIterator<CommentSubscription>>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  role: () => Promise<AsyncIterator<Role>>;
  password: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<Float>>;
  signupToken: () => Promise<AsyncIterator<String>>;
  signupTokenExpiry: () => Promise<AsyncIterator<Float>>;
  status: () => Promise<AsyncIterator<UserStatus>>;
  subscribedTasks: <T = Promise<AsyncIterator<TaskSubscription>>>(
    args?: {
      where?: TaskWhereInput;
      orderBy?: TaskOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  mentions: <T = Promise<AsyncIterator<CommentSubscription>>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Task {
  id: ID_Output;
  title: String;
  description: String;
  dueDate?: DateTimeOutput;
  due: TaskDue;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  status: TaskStatus;
}

export interface TaskPromise extends Promise<Task>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdBy: <T = UserPromise>() => T;
  assignedTo: <T = UserPromise>() => T;
  title: () => Promise<String>;
  description: () => Promise<String>;
  assets: <T = FragmentableArray<Asset>>(
    args?: {
      where?: AssetWhereInput;
      orderBy?: AssetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  taskList: <T = TaskListPromise>() => T;
  comments: <T = FragmentableArray<Comment>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  dueDate: () => Promise<DateTimeOutput>;
  due: () => Promise<TaskDue>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  customFields: <T = FragmentableArray<CustomField>>(
    args?: {
      where?: CustomFieldWhereInput;
      orderBy?: CustomFieldOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  status: () => Promise<TaskStatus>;
  subscribedUsers: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface TaskSubscription
  extends Promise<AsyncIterator<Task>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdBy: <T = UserSubscription>() => T;
  assignedTo: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  assets: <T = Promise<AsyncIterator<AssetSubscription>>>(
    args?: {
      where?: AssetWhereInput;
      orderBy?: AssetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  taskList: <T = TaskListSubscription>() => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  dueDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  due: () => Promise<AsyncIterator<TaskDue>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  customFields: <T = Promise<AsyncIterator<CustomFieldSubscription>>>(
    args?: {
      where?: CustomFieldWhereInput;
      orderBy?: CustomFieldOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  status: () => Promise<AsyncIterator<TaskStatus>>;
  subscribedUsers: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface TaskList {
  id: ID_Output;
  name: String;
  description?: String;
  slug: String;
}

export interface TaskListPromise extends Promise<TaskList>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  taskListFields: <T = FragmentableArray<TaskListField>>(
    args?: {
      where?: TaskListFieldWhereInput;
      orderBy?: TaskListFieldOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  tasks: <T = FragmentableArray<Task>>(
    args?: {
      where?: TaskWhereInput;
      orderBy?: TaskOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  slug: () => Promise<String>;
}

export interface TaskListSubscription
  extends Promise<AsyncIterator<TaskList>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  taskListFields: <T = Promise<AsyncIterator<TaskListFieldSubscription>>>(
    args?: {
      where?: TaskListFieldWhereInput;
      orderBy?: TaskListFieldOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  tasks: <T = Promise<AsyncIterator<TaskSubscription>>>(
    args?: {
      where?: TaskWhereInput;
      orderBy?: TaskOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  slug: () => Promise<AsyncIterator<String>>;
}

export interface TaskListField {
  id: ID_Output;
  fieldName: String;
  fieldType: FieldType;
}

export interface TaskListFieldPromise
  extends Promise<TaskListField>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fieldName: () => Promise<String>;
  fieldType: () => Promise<FieldType>;
  taskList: <T = TaskListPromise>() => T;
}

export interface TaskListFieldSubscription
  extends Promise<AsyncIterator<TaskListField>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fieldName: () => Promise<AsyncIterator<String>>;
  fieldType: () => Promise<AsyncIterator<FieldType>>;
  taskList: <T = TaskListSubscription>() => T;
}

export interface Comment {
  id: ID_Output;
  comment: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  comment: () => Promise<String>;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  assets: <T = FragmentableArray<Asset>>(
    args?: {
      where?: AssetWhereInput;
      orderBy?: AssetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  task: <T = TaskPromise>() => T;
  mentions: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  comment: () => Promise<AsyncIterator<String>>;
  createdBy: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  assets: <T = Promise<AsyncIterator<AssetSubscription>>>(
    args?: {
      where?: AssetWhereInput;
      orderBy?: AssetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  task: <T = TaskSubscription>() => T;
  mentions: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CustomField {
  id: ID_Output;
  fieldName: String;
  fieldType: FieldType;
  fieldValue: String;
}

export interface CustomFieldPromise extends Promise<CustomField>, Fragmentable {
  id: () => Promise<ID_Output>;
  fieldName: () => Promise<String>;
  fieldType: () => Promise<FieldType>;
  fieldValue: () => Promise<String>;
  taskListField: <T = TaskListFieldPromise>() => T;
}

export interface CustomFieldSubscription
  extends Promise<AsyncIterator<CustomField>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fieldName: () => Promise<AsyncIterator<String>>;
  fieldType: () => Promise<AsyncIterator<FieldType>>;
  fieldValue: () => Promise<AsyncIterator<String>>;
  taskListField: <T = TaskListFieldSubscription>() => T;
}

export interface AssetConnection {
  pageInfo: PageInfo;
  edges: AssetEdge[];
}

export interface AssetConnectionPromise
  extends Promise<AssetConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AssetEdge>>() => T;
  aggregate: <T = AggregateAssetPromise>() => T;
}

export interface AssetConnectionSubscription
  extends Promise<AsyncIterator<AssetConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AssetEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAssetSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AssetEdge {
  node: Asset;
  cursor: String;
}

export interface AssetEdgePromise extends Promise<AssetEdge>, Fragmentable {
  node: <T = AssetPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AssetEdgeSubscription
  extends Promise<AsyncIterator<AssetEdge>>,
    Fragmentable {
  node: <T = AssetSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAsset {
  count: Int;
}

export interface AggregateAssetPromise
  extends Promise<AggregateAsset>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAssetSubscription
  extends Promise<AsyncIterator<AggregateAsset>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CustomFieldConnection {
  pageInfo: PageInfo;
  edges: CustomFieldEdge[];
}

export interface CustomFieldConnectionPromise
  extends Promise<CustomFieldConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CustomFieldEdge>>() => T;
  aggregate: <T = AggregateCustomFieldPromise>() => T;
}

export interface CustomFieldConnectionSubscription
  extends Promise<AsyncIterator<CustomFieldConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CustomFieldEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCustomFieldSubscription>() => T;
}

export interface CustomFieldEdge {
  node: CustomField;
  cursor: String;
}

export interface CustomFieldEdgePromise
  extends Promise<CustomFieldEdge>,
    Fragmentable {
  node: <T = CustomFieldPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CustomFieldEdgeSubscription
  extends Promise<AsyncIterator<CustomFieldEdge>>,
    Fragmentable {
  node: <T = CustomFieldSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCustomField {
  count: Int;
}

export interface AggregateCustomFieldPromise
  extends Promise<AggregateCustomField>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCustomFieldSubscription
  extends Promise<AsyncIterator<AggregateCustomField>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TaskConnection {
  pageInfo: PageInfo;
  edges: TaskEdge[];
}

export interface TaskConnectionPromise
  extends Promise<TaskConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TaskEdge>>() => T;
  aggregate: <T = AggregateTaskPromise>() => T;
}

export interface TaskConnectionSubscription
  extends Promise<AsyncIterator<TaskConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TaskEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTaskSubscription>() => T;
}

export interface TaskEdge {
  node: Task;
  cursor: String;
}

export interface TaskEdgePromise extends Promise<TaskEdge>, Fragmentable {
  node: <T = TaskPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TaskEdgeSubscription
  extends Promise<AsyncIterator<TaskEdge>>,
    Fragmentable {
  node: <T = TaskSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTask {
  count: Int;
}

export interface AggregateTaskPromise
  extends Promise<AggregateTask>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTaskSubscription
  extends Promise<AsyncIterator<AggregateTask>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TaskListConnection {
  pageInfo: PageInfo;
  edges: TaskListEdge[];
}

export interface TaskListConnectionPromise
  extends Promise<TaskListConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TaskListEdge>>() => T;
  aggregate: <T = AggregateTaskListPromise>() => T;
}

export interface TaskListConnectionSubscription
  extends Promise<AsyncIterator<TaskListConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TaskListEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTaskListSubscription>() => T;
}

export interface TaskListEdge {
  node: TaskList;
  cursor: String;
}

export interface TaskListEdgePromise
  extends Promise<TaskListEdge>,
    Fragmentable {
  node: <T = TaskListPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TaskListEdgeSubscription
  extends Promise<AsyncIterator<TaskListEdge>>,
    Fragmentable {
  node: <T = TaskListSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTaskList {
  count: Int;
}

export interface AggregateTaskListPromise
  extends Promise<AggregateTaskList>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTaskListSubscription
  extends Promise<AsyncIterator<AggregateTaskList>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TaskListFieldConnection {
  pageInfo: PageInfo;
  edges: TaskListFieldEdge[];
}

export interface TaskListFieldConnectionPromise
  extends Promise<TaskListFieldConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TaskListFieldEdge>>() => T;
  aggregate: <T = AggregateTaskListFieldPromise>() => T;
}

export interface TaskListFieldConnectionSubscription
  extends Promise<AsyncIterator<TaskListFieldConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TaskListFieldEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTaskListFieldSubscription>() => T;
}

export interface TaskListFieldEdge {
  node: TaskListField;
  cursor: String;
}

export interface TaskListFieldEdgePromise
  extends Promise<TaskListFieldEdge>,
    Fragmentable {
  node: <T = TaskListFieldPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TaskListFieldEdgeSubscription
  extends Promise<AsyncIterator<TaskListFieldEdge>>,
    Fragmentable {
  node: <T = TaskListFieldSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTaskListField {
  count: Int;
}

export interface AggregateTaskListFieldPromise
  extends Promise<AggregateTaskListField>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTaskListFieldSubscription
  extends Promise<AsyncIterator<AggregateTaskListField>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AssetSubscriptionPayload {
  mutation: MutationType;
  node: Asset;
  updatedFields: String[];
  previousValues: AssetPreviousValues;
}

export interface AssetSubscriptionPayloadPromise
  extends Promise<AssetSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AssetPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AssetPreviousValuesPromise>() => T;
}

export interface AssetSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AssetSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AssetSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AssetPreviousValuesSubscription>() => T;
}

export interface AssetPreviousValues {
  id: ID_Output;
  title: String;
  assetUrl: String;
  createdAt: DateTimeOutput;
  assetType: AssetType;
}

export interface AssetPreviousValuesPromise
  extends Promise<AssetPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  assetUrl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  assetType: () => Promise<AssetType>;
}

export interface AssetPreviousValuesSubscription
  extends Promise<AsyncIterator<AssetPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  assetUrl: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  assetType: () => Promise<AsyncIterator<AssetType>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  comment: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  comment: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  comment: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CustomFieldSubscriptionPayload {
  mutation: MutationType;
  node: CustomField;
  updatedFields: String[];
  previousValues: CustomFieldPreviousValues;
}

export interface CustomFieldSubscriptionPayloadPromise
  extends Promise<CustomFieldSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CustomFieldPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CustomFieldPreviousValuesPromise>() => T;
}

export interface CustomFieldSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CustomFieldSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CustomFieldSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CustomFieldPreviousValuesSubscription>() => T;
}

export interface CustomFieldPreviousValues {
  id: ID_Output;
  fieldName: String;
  fieldType: FieldType;
  fieldValue: String;
}

export interface CustomFieldPreviousValuesPromise
  extends Promise<CustomFieldPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fieldName: () => Promise<String>;
  fieldType: () => Promise<FieldType>;
  fieldValue: () => Promise<String>;
}

export interface CustomFieldPreviousValuesSubscription
  extends Promise<AsyncIterator<CustomFieldPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fieldName: () => Promise<AsyncIterator<String>>;
  fieldType: () => Promise<AsyncIterator<FieldType>>;
  fieldValue: () => Promise<AsyncIterator<String>>;
}

export interface TaskSubscriptionPayload {
  mutation: MutationType;
  node: Task;
  updatedFields: String[];
  previousValues: TaskPreviousValues;
}

export interface TaskSubscriptionPayloadPromise
  extends Promise<TaskSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TaskPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TaskPreviousValuesPromise>() => T;
}

export interface TaskSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TaskSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TaskSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TaskPreviousValuesSubscription>() => T;
}

export interface TaskPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  dueDate?: DateTimeOutput;
  due: TaskDue;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  status: TaskStatus;
}

export interface TaskPreviousValuesPromise
  extends Promise<TaskPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  dueDate: () => Promise<DateTimeOutput>;
  due: () => Promise<TaskDue>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  status: () => Promise<TaskStatus>;
}

export interface TaskPreviousValuesSubscription
  extends Promise<AsyncIterator<TaskPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  dueDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  due: () => Promise<AsyncIterator<TaskDue>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<TaskStatus>>;
}

export interface TaskListSubscriptionPayload {
  mutation: MutationType;
  node: TaskList;
  updatedFields: String[];
  previousValues: TaskListPreviousValues;
}

export interface TaskListSubscriptionPayloadPromise
  extends Promise<TaskListSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TaskListPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TaskListPreviousValuesPromise>() => T;
}

export interface TaskListSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TaskListSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TaskListSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TaskListPreviousValuesSubscription>() => T;
}

export interface TaskListPreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
  slug: String;
}

export interface TaskListPreviousValuesPromise
  extends Promise<TaskListPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  slug: () => Promise<String>;
}

export interface TaskListPreviousValuesSubscription
  extends Promise<AsyncIterator<TaskListPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
}

export interface TaskListFieldSubscriptionPayload {
  mutation: MutationType;
  node: TaskListField;
  updatedFields: String[];
  previousValues: TaskListFieldPreviousValues;
}

export interface TaskListFieldSubscriptionPayloadPromise
  extends Promise<TaskListFieldSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TaskListFieldPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TaskListFieldPreviousValuesPromise>() => T;
}

export interface TaskListFieldSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TaskListFieldSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TaskListFieldSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TaskListFieldPreviousValuesSubscription>() => T;
}

export interface TaskListFieldPreviousValues {
  id: ID_Output;
  fieldName: String;
  fieldType: FieldType;
}

export interface TaskListFieldPreviousValuesPromise
  extends Promise<TaskListFieldPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fieldName: () => Promise<String>;
  fieldType: () => Promise<FieldType>;
}

export interface TaskListFieldPreviousValuesSubscription
  extends Promise<AsyncIterator<TaskListFieldPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fieldName: () => Promise<AsyncIterator<String>>;
  fieldType: () => Promise<AsyncIterator<FieldType>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  role: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status: UserStatus;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  slackHandle: () => Promise<String>;
  role: () => Promise<Role>;
  password: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  signupToken: () => Promise<String>;
  signupTokenExpiry: () => Promise<Float>;
  status: () => Promise<UserStatus>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  slackHandle: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  password: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<Float>>;
  signupToken: () => Promise<AsyncIterator<String>>;
  signupTokenExpiry: () => Promise<AsyncIterator<Float>>;
  status: () => Promise<AsyncIterator<UserStatus>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Asset",
    embedded: false
  },
  {
    name: "AssetType",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "CustomField",
    embedded: false
  },
  {
    name: "FieldType",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "Task",
    embedded: false
  },
  {
    name: "TaskDue",
    embedded: false
  },
  {
    name: "TaskList",
    embedded: false
  },
  {
    name: "TaskListField",
    embedded: false
  },
  {
    name: "TaskStatus",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "UserStatus",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
