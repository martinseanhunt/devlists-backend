// Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  asset: (where?: AssetWhereInput) => Promise<boolean>;
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  customField: (where?: CustomFieldWhereInput) => Promise<boolean>;
  task: (where?: TaskWhereInput) => Promise<boolean>;
  taskList: (where?: TaskListWhereInput) => Promise<boolean>;
  taskListField: (where?: TaskListFieldWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  asset: (where: AssetWhereUniqueInput) => AssetNullablePromise;
  assets: (args?: {
    where?: AssetWhereInput;
    orderBy?: AssetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Asset>;
  assetsConnection: (args?: {
    where?: AssetWhereInput;
    orderBy?: AssetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AssetConnectionPromise;
  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  customField: (
    where: CustomFieldWhereUniqueInput
  ) => CustomFieldNullablePromise;
  customFields: (args?: {
    where?: CustomFieldWhereInput;
    orderBy?: CustomFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CustomField>;
  customFieldsConnection: (args?: {
    where?: CustomFieldWhereInput;
    orderBy?: CustomFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CustomFieldConnectionPromise;
  task: (where: TaskWhereUniqueInput) => TaskNullablePromise;
  tasks: (args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Task>;
  tasksConnection: (args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TaskConnectionPromise;
  taskList: (where: TaskListWhereUniqueInput) => TaskListNullablePromise;
  taskLists: (args?: {
    where?: TaskListWhereInput;
    orderBy?: TaskListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<TaskList>;
  taskListsConnection: (args?: {
    where?: TaskListWhereInput;
    orderBy?: TaskListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TaskListConnectionPromise;
  taskListField: (
    where: TaskListFieldWhereUniqueInput
  ) => TaskListFieldNullablePromise;
  taskListFields: (args?: {
    where?: TaskListFieldWhereInput;
    orderBy?: TaskListFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<TaskListField>;
  taskListFieldsConnection: (args?: {
    where?: TaskListFieldWhereInput;
    orderBy?: TaskListFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TaskListFieldConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAsset: (data: AssetCreateInput) => AssetPromise;
  updateAsset: (args: {
    data: AssetUpdateInput;
    where: AssetWhereUniqueInput;
  }) => AssetPromise;
  updateManyAssets: (args: {
    data: AssetUpdateManyMutationInput;
    where?: AssetWhereInput;
  }) => BatchPayloadPromise;
  upsertAsset: (args: {
    where: AssetWhereUniqueInput;
    create: AssetCreateInput;
    update: AssetUpdateInput;
  }) => AssetPromise;
  deleteAsset: (where: AssetWhereUniqueInput) => AssetPromise;
  deleteManyAssets: (where?: AssetWhereInput) => BatchPayloadPromise;
  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createCustomField: (data: CustomFieldCreateInput) => CustomFieldPromise;
  updateCustomField: (args: {
    data: CustomFieldUpdateInput;
    where: CustomFieldWhereUniqueInput;
  }) => CustomFieldPromise;
  updateManyCustomFields: (args: {
    data: CustomFieldUpdateManyMutationInput;
    where?: CustomFieldWhereInput;
  }) => BatchPayloadPromise;
  upsertCustomField: (args: {
    where: CustomFieldWhereUniqueInput;
    create: CustomFieldCreateInput;
    update: CustomFieldUpdateInput;
  }) => CustomFieldPromise;
  deleteCustomField: (where: CustomFieldWhereUniqueInput) => CustomFieldPromise;
  deleteManyCustomFields: (
    where?: CustomFieldWhereInput
  ) => BatchPayloadPromise;
  createTask: (data: TaskCreateInput) => TaskPromise;
  updateTask: (args: {
    data: TaskUpdateInput;
    where: TaskWhereUniqueInput;
  }) => TaskPromise;
  updateManyTasks: (args: {
    data: TaskUpdateManyMutationInput;
    where?: TaskWhereInput;
  }) => BatchPayloadPromise;
  upsertTask: (args: {
    where: TaskWhereUniqueInput;
    create: TaskCreateInput;
    update: TaskUpdateInput;
  }) => TaskPromise;
  deleteTask: (where: TaskWhereUniqueInput) => TaskPromise;
  deleteManyTasks: (where?: TaskWhereInput) => BatchPayloadPromise;
  createTaskList: (data: TaskListCreateInput) => TaskListPromise;
  updateTaskList: (args: {
    data: TaskListUpdateInput;
    where: TaskListWhereUniqueInput;
  }) => TaskListPromise;
  updateManyTaskLists: (args: {
    data: TaskListUpdateManyMutationInput;
    where?: TaskListWhereInput;
  }) => BatchPayloadPromise;
  upsertTaskList: (args: {
    where: TaskListWhereUniqueInput;
    create: TaskListCreateInput;
    update: TaskListUpdateInput;
  }) => TaskListPromise;
  deleteTaskList: (where: TaskListWhereUniqueInput) => TaskListPromise;
  deleteManyTaskLists: (where?: TaskListWhereInput) => BatchPayloadPromise;
  createTaskListField: (data: TaskListFieldCreateInput) => TaskListFieldPromise;
  updateTaskListField: (args: {
    data: TaskListFieldUpdateInput;
    where: TaskListFieldWhereUniqueInput;
  }) => TaskListFieldPromise;
  updateManyTaskListFields: (args: {
    data: TaskListFieldUpdateManyMutationInput;
    where?: TaskListFieldWhereInput;
  }) => BatchPayloadPromise;
  upsertTaskListField: (args: {
    where: TaskListFieldWhereUniqueInput;
    create: TaskListFieldCreateInput;
    update: TaskListFieldUpdateInput;
  }) => TaskListFieldPromise;
  deleteTaskListField: (
    where: TaskListFieldWhereUniqueInput
  ) => TaskListFieldPromise;
  deleteManyTaskListFields: (
    where?: TaskListFieldWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  asset: (
    where?: AssetSubscriptionWhereInput
  ) => AssetSubscriptionPayloadSubscription;
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  customField: (
    where?: CustomFieldSubscriptionWhereInput
  ) => CustomFieldSubscriptionPayloadSubscription;
  task: (
    where?: TaskSubscriptionWhereInput
  ) => TaskSubscriptionPayloadSubscription;
  taskList: (
    where?: TaskListSubscriptionWhereInput
  ) => TaskListSubscriptionPayloadSubscription;
  taskListField: (
    where?: TaskListFieldSubscriptionWhereInput
  ) => TaskListFieldSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TaskOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "richText_ASC"
  | "richText_DESC"
  | "dueDate_ASC"
  | "dueDate_DESC"
  | "due_ASC"
  | "due_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "status_ASC"
  | "status_DESC"
  | "priority_ASC"
  | "priority_DESC";

export type FieldType = "STRING" | "INT" | "DATE" | "ASSET";

export type AssetType = "IMAGE" | "VIDEO" | "FILE";

export type TaskListOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "color_ASC"
  | "color_DESC";

export type Role = "SUPERADMIN" | "ADMIN" | "STAFF";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "slackHandle_ASC"
  | "slackHandle_DESC"
  | "role_ASC"
  | "role_DESC"
  | "password_ASC"
  | "password_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "resetTokenExpiry_ASC"
  | "resetTokenExpiry_DESC"
  | "signupToken_ASC"
  | "signupToken_DESC"
  | "signupTokenExpiry_ASC"
  | "signupTokenExpiry_DESC"
  | "status_ASC"
  | "status_DESC";

export type TaskDue = "WHENPOSSIBLE" | "ASAP" | "BYDATE" | "ONDATE";

export type TaskStatus =
  | "CREATED"
  | "ASSIGNED"
  | "AWAITINGINPUT"
  | "AWAITINGASSETS"
  | "AWAITINGFEEDBACK"
  | "INPROGRESS"
  | "COMPLETED"
  | "CLOSED"
  | "CANCELLED";

export type UserStatus = "JOINED" | "INVITED" | "DELETED";

export type TaskPriority = "LOWEST" | "LOW" | "MEDIUM" | "HIGH" | "URGENT";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "comment_ASC"
  | "comment_DESC"
  | "richText_ASC"
  | "richText_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CustomFieldOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "fieldName_ASC"
  | "fieldName_DESC"
  | "fieldType_ASC"
  | "fieldType_DESC"
  | "fieldValue_ASC"
  | "fieldValue_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AssetOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "assetUrl_ASC"
  | "assetUrl_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "assetType_ASC"
  | "assetType_DESC";

export type TaskListFieldOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "fieldName_ASC"
  | "fieldName_DESC"
  | "fieldType_ASC"
  | "fieldType_DESC";

export interface AssetUpdateDataInput {
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
  title?: Maybe<String>;
  assetUrl?: Maybe<String>;
  assetType?: Maybe<AssetType>;
}

export type AssetWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TaskUpdateManyWithoutAssignedToInput {
  create?: Maybe<
    TaskCreateWithoutAssignedToInput[] | TaskCreateWithoutAssignedToInput
  >;
  delete?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  connect?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  set?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  disconnect?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  update?: Maybe<
    | TaskUpdateWithWhereUniqueWithoutAssignedToInput[]
    | TaskUpdateWithWhereUniqueWithoutAssignedToInput
  >;
  upsert?: Maybe<
    | TaskUpsertWithWhereUniqueWithoutAssignedToInput[]
    | TaskUpsertWithWhereUniqueWithoutAssignedToInput
  >;
  deleteMany?: Maybe<TaskScalarWhereInput[] | TaskScalarWhereInput>;
  updateMany?: Maybe<
    TaskUpdateManyWithWhereNestedInput[] | TaskUpdateManyWithWhereNestedInput
  >;
}

export interface TaskListFieldWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  fieldName?: Maybe<String>;
  fieldName_not?: Maybe<String>;
  fieldName_in?: Maybe<String[] | String>;
  fieldName_not_in?: Maybe<String[] | String>;
  fieldName_lt?: Maybe<String>;
  fieldName_lte?: Maybe<String>;
  fieldName_gt?: Maybe<String>;
  fieldName_gte?: Maybe<String>;
  fieldName_contains?: Maybe<String>;
  fieldName_not_contains?: Maybe<String>;
  fieldName_starts_with?: Maybe<String>;
  fieldName_not_starts_with?: Maybe<String>;
  fieldName_ends_with?: Maybe<String>;
  fieldName_not_ends_with?: Maybe<String>;
  fieldType?: Maybe<FieldType>;
  fieldType_not?: Maybe<FieldType>;
  fieldType_in?: Maybe<FieldType[] | FieldType>;
  fieldType_not_in?: Maybe<FieldType[] | FieldType>;
  taskList?: Maybe<TaskListWhereInput>;
  AND?: Maybe<TaskListFieldWhereInput[] | TaskListFieldWhereInput>;
  OR?: Maybe<TaskListFieldWhereInput[] | TaskListFieldWhereInput>;
  NOT?: Maybe<TaskListFieldWhereInput[] | TaskListFieldWhereInput>;
}

export interface TaskUpdateWithWhereUniqueWithoutAssignedToInput {
  where: TaskWhereUniqueInput;
  data: TaskUpdateWithoutAssignedToDataInput;
}

export interface TaskListWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  taskListFields_every?: Maybe<TaskListFieldWhereInput>;
  taskListFields_some?: Maybe<TaskListFieldWhereInput>;
  taskListFields_none?: Maybe<TaskListFieldWhereInput>;
  tasks_every?: Maybe<TaskWhereInput>;
  tasks_some?: Maybe<TaskWhereInput>;
  tasks_none?: Maybe<TaskWhereInput>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  color?: Maybe<String>;
  color_not?: Maybe<String>;
  color_in?: Maybe<String[] | String>;
  color_not_in?: Maybe<String[] | String>;
  color_lt?: Maybe<String>;
  color_lte?: Maybe<String>;
  color_gt?: Maybe<String>;
  color_gte?: Maybe<String>;
  color_contains?: Maybe<String>;
  color_not_contains?: Maybe<String>;
  color_starts_with?: Maybe<String>;
  color_not_starts_with?: Maybe<String>;
  color_ends_with?: Maybe<String>;
  color_not_ends_with?: Maybe<String>;
  AND?: Maybe<TaskListWhereInput[] | TaskListWhereInput>;
  OR?: Maybe<TaskListWhereInput[] | TaskListWhereInput>;
  NOT?: Maybe<TaskListWhereInput[] | TaskListWhereInput>;
}

export interface TaskUpdateWithoutAssignedToDataInput {
  createdBy?: Maybe<UserUpdateOneRequiredWithoutTasksCreatedInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  richText?: Maybe<String>;
  assets?: Maybe<AssetUpdateManyInput>;
  taskList?: Maybe<TaskListUpdateOneRequiredWithoutTasksInput>;
  comments?: Maybe<CommentUpdateManyWithoutTaskInput>;
  dueDate?: Maybe<DateTimeInput>;
  due?: Maybe<TaskDue>;
  customFields?: Maybe<CustomFieldUpdateManyInput>;
  status?: Maybe<TaskStatus>;
  priority?: Maybe<TaskPriority>;
  subscribedUsers?: Maybe<UserUpdateManyWithoutSubscribedTasksInput>;
}

export interface AssetWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdBy?: Maybe<UserWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  assetUrl?: Maybe<String>;
  assetUrl_not?: Maybe<String>;
  assetUrl_in?: Maybe<String[] | String>;
  assetUrl_not_in?: Maybe<String[] | String>;
  assetUrl_lt?: Maybe<String>;
  assetUrl_lte?: Maybe<String>;
  assetUrl_gt?: Maybe<String>;
  assetUrl_gte?: Maybe<String>;
  assetUrl_contains?: Maybe<String>;
  assetUrl_not_contains?: Maybe<String>;
  assetUrl_starts_with?: Maybe<String>;
  assetUrl_not_starts_with?: Maybe<String>;
  assetUrl_ends_with?: Maybe<String>;
  assetUrl_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  assetType?: Maybe<AssetType>;
  assetType_not?: Maybe<AssetType>;
  assetType_in?: Maybe<AssetType[] | AssetType>;
  assetType_not_in?: Maybe<AssetType[] | AssetType>;
  AND?: Maybe<AssetWhereInput[] | AssetWhereInput>;
  OR?: Maybe<AssetWhereInput[] | AssetWhereInput>;
  NOT?: Maybe<AssetWhereInput[] | AssetWhereInput>;
}

export interface AssetUpdateInput {
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
  title?: Maybe<String>;
  assetUrl?: Maybe<String>;
  assetType?: Maybe<AssetType>;
}

export interface UserUpdateWithWhereUniqueWithoutMentionsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutMentionsDataInput;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TaskListUpdateOneRequiredWithoutTasksInput {
  create?: Maybe<TaskListCreateWithoutTasksInput>;
  update?: Maybe<TaskListUpdateWithoutTasksDataInput>;
  upsert?: Maybe<TaskListUpsertWithoutTasksInput>;
  connect?: Maybe<TaskListWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  slackHandle?: Maybe<String>;
  tasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
  tasksAssignedTo?: Maybe<TaskUpdateManyWithoutAssignedToInput>;
  commentsCreated?: Maybe<CommentUpdateManyWithoutCreatedByInput>;
  role?: Maybe<Role>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  signupToken?: Maybe<String>;
  signupTokenExpiry?: Maybe<Float>;
  status?: Maybe<UserStatus>;
  subscribedTasks?: Maybe<TaskUpdateManyWithoutSubscribedUsersInput>;
  mentions?: Maybe<CommentUpdateManyWithoutMentionsInput>;
}

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  comment?: Maybe<String>;
  comment_not?: Maybe<String>;
  comment_in?: Maybe<String[] | String>;
  comment_not_in?: Maybe<String[] | String>;
  comment_lt?: Maybe<String>;
  comment_lte?: Maybe<String>;
  comment_gt?: Maybe<String>;
  comment_gte?: Maybe<String>;
  comment_contains?: Maybe<String>;
  comment_not_contains?: Maybe<String>;
  comment_starts_with?: Maybe<String>;
  comment_not_starts_with?: Maybe<String>;
  comment_ends_with?: Maybe<String>;
  comment_not_ends_with?: Maybe<String>;
  richText?: Maybe<String>;
  richText_not?: Maybe<String>;
  richText_in?: Maybe<String[] | String>;
  richText_not_in?: Maybe<String[] | String>;
  richText_lt?: Maybe<String>;
  richText_lte?: Maybe<String>;
  richText_gt?: Maybe<String>;
  richText_gte?: Maybe<String>;
  richText_contains?: Maybe<String>;
  richText_not_contains?: Maybe<String>;
  richText_starts_with?: Maybe<String>;
  richText_not_starts_with?: Maybe<String>;
  richText_ends_with?: Maybe<String>;
  richText_not_ends_with?: Maybe<String>;
  createdBy?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  assets_every?: Maybe<AssetWhereInput>;
  assets_some?: Maybe<AssetWhereInput>;
  assets_none?: Maybe<AssetWhereInput>;
  task?: Maybe<TaskWhereInput>;
  mentions_every?: Maybe<UserWhereInput>;
  mentions_some?: Maybe<UserWhereInput>;
  mentions_none?: Maybe<UserWhereInput>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export interface TaskUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    TaskCreateWithoutCreatedByInput[] | TaskCreateWithoutCreatedByInput
  >;
  delete?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  connect?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  set?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  disconnect?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  update?: Maybe<
    | TaskUpdateWithWhereUniqueWithoutCreatedByInput[]
    | TaskUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | TaskUpsertWithWhereUniqueWithoutCreatedByInput[]
    | TaskUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<TaskScalarWhereInput[] | TaskScalarWhereInput>;
  updateMany?: Maybe<
    TaskUpdateManyWithWhereNestedInput[] | TaskUpdateManyWithWhereNestedInput
  >;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  slackHandle?: Maybe<String>;
  slackHandle_not?: Maybe<String>;
  slackHandle_in?: Maybe<String[] | String>;
  slackHandle_not_in?: Maybe<String[] | String>;
  slackHandle_lt?: Maybe<String>;
  slackHandle_lte?: Maybe<String>;
  slackHandle_gt?: Maybe<String>;
  slackHandle_gte?: Maybe<String>;
  slackHandle_contains?: Maybe<String>;
  slackHandle_not_contains?: Maybe<String>;
  slackHandle_starts_with?: Maybe<String>;
  slackHandle_not_starts_with?: Maybe<String>;
  slackHandle_ends_with?: Maybe<String>;
  slackHandle_not_ends_with?: Maybe<String>;
  tasksCreated_every?: Maybe<TaskWhereInput>;
  tasksCreated_some?: Maybe<TaskWhereInput>;
  tasksCreated_none?: Maybe<TaskWhereInput>;
  tasksAssignedTo_every?: Maybe<TaskWhereInput>;
  tasksAssignedTo_some?: Maybe<TaskWhereInput>;
  tasksAssignedTo_none?: Maybe<TaskWhereInput>;
  commentsCreated_every?: Maybe<CommentWhereInput>;
  commentsCreated_some?: Maybe<CommentWhereInput>;
  commentsCreated_none?: Maybe<CommentWhereInput>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetToken_not?: Maybe<String>;
  resetToken_in?: Maybe<String[] | String>;
  resetToken_not_in?: Maybe<String[] | String>;
  resetToken_lt?: Maybe<String>;
  resetToken_lte?: Maybe<String>;
  resetToken_gt?: Maybe<String>;
  resetToken_gte?: Maybe<String>;
  resetToken_contains?: Maybe<String>;
  resetToken_not_contains?: Maybe<String>;
  resetToken_starts_with?: Maybe<String>;
  resetToken_not_starts_with?: Maybe<String>;
  resetToken_ends_with?: Maybe<String>;
  resetToken_not_ends_with?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  resetTokenExpiry_not?: Maybe<Float>;
  resetTokenExpiry_in?: Maybe<Float[] | Float>;
  resetTokenExpiry_not_in?: Maybe<Float[] | Float>;
  resetTokenExpiry_lt?: Maybe<Float>;
  resetTokenExpiry_lte?: Maybe<Float>;
  resetTokenExpiry_gt?: Maybe<Float>;
  resetTokenExpiry_gte?: Maybe<Float>;
  signupToken?: Maybe<String>;
  signupToken_not?: Maybe<String>;
  signupToken_in?: Maybe<String[] | String>;
  signupToken_not_in?: Maybe<String[] | String>;
  signupToken_lt?: Maybe<String>;
  signupToken_lte?: Maybe<String>;
  signupToken_gt?: Maybe<String>;
  signupToken_gte?: Maybe<String>;
  signupToken_contains?: Maybe<String>;
  signupToken_not_contains?: Maybe<String>;
  signupToken_starts_with?: Maybe<String>;
  signupToken_not_starts_with?: Maybe<String>;
  signupToken_ends_with?: Maybe<String>;
  signupToken_not_ends_with?: Maybe<String>;
  signupTokenExpiry?: Maybe<Float>;
  signupTokenExpiry_not?: Maybe<Float>;
  signupTokenExpiry_in?: Maybe<Float[] | Float>;
  signupTokenExpiry_not_in?: Maybe<Float[] | Float>;
  signupTokenExpiry_lt?: Maybe<Float>;
  signupTokenExpiry_lte?: Maybe<Float>;
  signupTokenExpiry_gt?: Maybe<Float>;
  signupTokenExpiry_gte?: Maybe<Float>;
  status?: Maybe<UserStatus>;
  status_not?: Maybe<UserStatus>;
  status_in?: Maybe<UserStatus[] | UserStatus>;
  status_not_in?: Maybe<UserStatus[] | UserStatus>;
  subscribedTasks_every?: Maybe<TaskWhereInput>;
  subscribedTasks_some?: Maybe<TaskWhereInput>;
  subscribedTasks_none?: Maybe<TaskWhereInput>;
  mentions_every?: Maybe<CommentWhereInput>;
  mentions_some?: Maybe<CommentWhereInput>;
  mentions_none?: Maybe<CommentWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface TaskUpdateWithWhereUniqueWithoutCreatedByInput {
  where: TaskWhereUniqueInput;
  data: TaskUpdateWithoutCreatedByDataInput;
}

export interface TaskWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdBy?: Maybe<UserWhereInput>;
  assignedTo?: Maybe<UserWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  richText?: Maybe<String>;
  richText_not?: Maybe<String>;
  richText_in?: Maybe<String[] | String>;
  richText_not_in?: Maybe<String[] | String>;
  richText_lt?: Maybe<String>;
  richText_lte?: Maybe<String>;
  richText_gt?: Maybe<String>;
  richText_gte?: Maybe<String>;
  richText_contains?: Maybe<String>;
  richText_not_contains?: Maybe<String>;
  richText_starts_with?: Maybe<String>;
  richText_not_starts_with?: Maybe<String>;
  richText_ends_with?: Maybe<String>;
  richText_not_ends_with?: Maybe<String>;
  assets_every?: Maybe<AssetWhereInput>;
  assets_some?: Maybe<AssetWhereInput>;
  assets_none?: Maybe<AssetWhereInput>;
  taskList?: Maybe<TaskListWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  dueDate?: Maybe<DateTimeInput>;
  dueDate_not?: Maybe<DateTimeInput>;
  dueDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dueDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dueDate_lt?: Maybe<DateTimeInput>;
  dueDate_lte?: Maybe<DateTimeInput>;
  dueDate_gt?: Maybe<DateTimeInput>;
  dueDate_gte?: Maybe<DateTimeInput>;
  due?: Maybe<TaskDue>;
  due_not?: Maybe<TaskDue>;
  due_in?: Maybe<TaskDue[] | TaskDue>;
  due_not_in?: Maybe<TaskDue[] | TaskDue>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  customFields_every?: Maybe<CustomFieldWhereInput>;
  customFields_some?: Maybe<CustomFieldWhereInput>;
  customFields_none?: Maybe<CustomFieldWhereInput>;
  status?: Maybe<TaskStatus>;
  status_not?: Maybe<TaskStatus>;
  status_in?: Maybe<TaskStatus[] | TaskStatus>;
  status_not_in?: Maybe<TaskStatus[] | TaskStatus>;
  priority?: Maybe<TaskPriority>;
  priority_not?: Maybe<TaskPriority>;
  priority_in?: Maybe<TaskPriority[] | TaskPriority>;
  priority_not_in?: Maybe<TaskPriority[] | TaskPriority>;
  subscribedUsers_every?: Maybe<UserWhereInput>;
  subscribedUsers_some?: Maybe<UserWhereInput>;
  subscribedUsers_none?: Maybe<UserWhereInput>;
  AND?: Maybe<TaskWhereInput[] | TaskWhereInput>;
  OR?: Maybe<TaskWhereInput[] | TaskWhereInput>;
  NOT?: Maybe<TaskWhereInput[] | TaskWhereInput>;
}

export interface TaskUpdateWithoutCreatedByDataInput {
  assignedTo?: Maybe<UserUpdateOneWithoutTasksAssignedToInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  richText?: Maybe<String>;
  assets?: Maybe<AssetUpdateManyInput>;
  taskList?: Maybe<TaskListUpdateOneRequiredWithoutTasksInput>;
  comments?: Maybe<CommentUpdateManyWithoutTaskInput>;
  dueDate?: Maybe<DateTimeInput>;
  due?: Maybe<TaskDue>;
  customFields?: Maybe<CustomFieldUpdateManyInput>;
  status?: Maybe<TaskStatus>;
  priority?: Maybe<TaskPriority>;
  subscribedUsers?: Maybe<UserUpdateManyWithoutSubscribedTasksInput>;
}

export interface CustomFieldSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CustomFieldWhereInput>;
  AND?: Maybe<
    CustomFieldSubscriptionWhereInput[] | CustomFieldSubscriptionWhereInput
  >;
  OR?: Maybe<
    CustomFieldSubscriptionWhereInput[] | CustomFieldSubscriptionWhereInput
  >;
  NOT?: Maybe<
    CustomFieldSubscriptionWhereInput[] | CustomFieldSubscriptionWhereInput
  >;
}

export interface UserUpdateOneWithoutTasksAssignedToInput {
  create?: Maybe<UserCreateWithoutTasksAssignedToInput>;
  update?: Maybe<UserUpdateWithoutTasksAssignedToDataInput>;
  upsert?: Maybe<UserUpsertWithoutTasksAssignedToInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface AssetSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AssetWhereInput>;
  AND?: Maybe<AssetSubscriptionWhereInput[] | AssetSubscriptionWhereInput>;
  OR?: Maybe<AssetSubscriptionWhereInput[] | AssetSubscriptionWhereInput>;
  NOT?: Maybe<AssetSubscriptionWhereInput[] | AssetSubscriptionWhereInput>;
}

export interface UserUpdateWithoutTasksAssignedToDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  slackHandle?: Maybe<String>;
  tasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
  commentsCreated?: Maybe<CommentUpdateManyWithoutCreatedByInput>;
  role?: Maybe<Role>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  signupToken?: Maybe<String>;
  signupTokenExpiry?: Maybe<Float>;
  status?: Maybe<UserStatus>;
  subscribedTasks?: Maybe<TaskUpdateManyWithoutSubscribedUsersInput>;
  mentions?: Maybe<CommentUpdateManyWithoutMentionsInput>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  slackHandle?: Maybe<String>;
  tasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
  tasksAssignedTo?: Maybe<TaskUpdateManyWithoutAssignedToInput>;
  commentsCreated?: Maybe<CommentUpdateManyWithoutCreatedByInput>;
  role?: Maybe<Role>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  signupToken?: Maybe<String>;
  signupTokenExpiry?: Maybe<Float>;
  status?: Maybe<UserStatus>;
  subscribedTasks?: Maybe<TaskUpdateManyWithoutSubscribedUsersInput>;
  mentions?: Maybe<CommentUpdateManyWithoutMentionsInput>;
}

export interface CommentUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    CommentCreateWithoutCreatedByInput[] | CommentCreateWithoutCreatedByInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutCreatedByInput[]
    | CommentUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutCreatedByInput[]
    | CommentUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CommentUpdateWithWhereUniqueWithoutCreatedByInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutCreatedByDataInput;
}

export interface TaskListUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  slug?: Maybe<String>;
  color?: Maybe<String>;
}

export interface CommentUpdateWithoutCreatedByDataInput {
  comment?: Maybe<String>;
  richText?: Maybe<String>;
  assets?: Maybe<AssetUpdateManyInput>;
  task?: Maybe<TaskUpdateOneRequiredWithoutCommentsInput>;
  mentions?: Maybe<UserUpdateManyWithoutMentionsInput>;
}

export type CustomFieldWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AssetUpdateManyInput {
  create?: Maybe<AssetCreateInput[] | AssetCreateInput>;
  update?: Maybe<
    | AssetUpdateWithWhereUniqueNestedInput[]
    | AssetUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | AssetUpsertWithWhereUniqueNestedInput[]
    | AssetUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<AssetWhereUniqueInput[] | AssetWhereUniqueInput>;
  connect?: Maybe<AssetWhereUniqueInput[] | AssetWhereUniqueInput>;
  set?: Maybe<AssetWhereUniqueInput[] | AssetWhereUniqueInput>;
  disconnect?: Maybe<AssetWhereUniqueInput[] | AssetWhereUniqueInput>;
  deleteMany?: Maybe<AssetScalarWhereInput[] | AssetScalarWhereInput>;
  updateMany?: Maybe<
    AssetUpdateManyWithWhereNestedInput[] | AssetUpdateManyWithWhereNestedInput
  >;
}

export interface TaskUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  richText?: Maybe<String>;
  dueDate?: Maybe<DateTimeInput>;
  due?: Maybe<TaskDue>;
  status?: Maybe<TaskStatus>;
  priority?: Maybe<TaskPriority>;
}

export interface AssetUpdateWithWhereUniqueNestedInput {
  where: AssetWhereUniqueInput;
  data: AssetUpdateDataInput;
}

export type TaskWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TaskUpsertWithWhereUniqueWithoutAssignedToInput {
  where: TaskWhereUniqueInput;
  update: TaskUpdateWithoutAssignedToDataInput;
  create: TaskCreateWithoutAssignedToInput;
}

export interface CustomFieldUpdateManyMutationInput {
  fieldName?: Maybe<String>;
  fieldType?: Maybe<FieldType>;
  fieldValue?: Maybe<String>;
}

export interface AssetUpsertWithWhereUniqueNestedInput {
  where: AssetWhereUniqueInput;
  update: AssetUpdateDataInput;
  create: AssetCreateInput;
}

export type TaskListWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
  slug?: Maybe<String>;
}>;

export interface AssetScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  assetUrl?: Maybe<String>;
  assetUrl_not?: Maybe<String>;
  assetUrl_in?: Maybe<String[] | String>;
  assetUrl_not_in?: Maybe<String[] | String>;
  assetUrl_lt?: Maybe<String>;
  assetUrl_lte?: Maybe<String>;
  assetUrl_gt?: Maybe<String>;
  assetUrl_gte?: Maybe<String>;
  assetUrl_contains?: Maybe<String>;
  assetUrl_not_contains?: Maybe<String>;
  assetUrl_starts_with?: Maybe<String>;
  assetUrl_not_starts_with?: Maybe<String>;
  assetUrl_ends_with?: Maybe<String>;
  assetUrl_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  assetType?: Maybe<AssetType>;
  assetType_not?: Maybe<AssetType>;
  assetType_in?: Maybe<AssetType[] | AssetType>;
  assetType_not_in?: Maybe<AssetType[] | AssetType>;
  AND?: Maybe<AssetScalarWhereInput[] | AssetScalarWhereInput>;
  OR?: Maybe<AssetScalarWhereInput[] | AssetScalarWhereInput>;
  NOT?: Maybe<AssetScalarWhereInput[] | AssetScalarWhereInput>;
}

export interface CommentUpdateInput {
  comment?: Maybe<String>;
  richText?: Maybe<String>;
  createdBy?: Maybe<UserUpdateOneRequiredWithoutCommentsCreatedInput>;
  assets?: Maybe<AssetUpdateManyInput>;
  task?: Maybe<TaskUpdateOneRequiredWithoutCommentsInput>;
  mentions?: Maybe<UserUpdateManyWithoutMentionsInput>;
}

export interface AssetUpdateManyWithWhereNestedInput {
  where: AssetScalarWhereInput;
  data: AssetUpdateManyDataInput;
}

export interface AssetUpdateManyMutationInput {
  title?: Maybe<String>;
  assetUrl?: Maybe<String>;
  assetType?: Maybe<AssetType>;
}

export interface AssetUpdateManyDataInput {
  title?: Maybe<String>;
  assetUrl?: Maybe<String>;
  assetType?: Maybe<AssetType>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface TaskUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<TaskCreateWithoutCommentsInput>;
  update?: Maybe<TaskUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<TaskUpsertWithoutCommentsInput>;
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface UserUpsertWithoutTasksAssignedToInput {
  update: UserUpdateWithoutTasksAssignedToDataInput;
  create: UserCreateWithoutTasksAssignedToInput;
}

export interface TaskUpdateWithoutCommentsDataInput {
  createdBy?: Maybe<UserUpdateOneRequiredWithoutTasksCreatedInput>;
  assignedTo?: Maybe<UserUpdateOneWithoutTasksAssignedToInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  richText?: Maybe<String>;
  assets?: Maybe<AssetUpdateManyInput>;
  taskList?: Maybe<TaskListUpdateOneRequiredWithoutTasksInput>;
  dueDate?: Maybe<DateTimeInput>;
  due?: Maybe<TaskDue>;
  customFields?: Maybe<CustomFieldUpdateManyInput>;
  status?: Maybe<TaskStatus>;
  priority?: Maybe<TaskPriority>;
  subscribedUsers?: Maybe<UserUpdateManyWithoutSubscribedTasksInput>;
}

export interface CommentUpsertWithWhereUniqueWithoutCreatedByInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutCreatedByDataInput;
  create: CommentCreateWithoutCreatedByInput;
}

export interface UserUpdateOneRequiredWithoutTasksCreatedInput {
  create?: Maybe<UserCreateWithoutTasksCreatedInput>;
  update?: Maybe<UserUpdateWithoutTasksCreatedDataInput>;
  upsert?: Maybe<UserUpsertWithoutTasksCreatedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpsertWithoutTasksCreatedInput {
  update: UserUpdateWithoutTasksCreatedDataInput;
  create: UserCreateWithoutTasksCreatedInput;
}

export interface UserUpdateWithoutTasksCreatedDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  slackHandle?: Maybe<String>;
  tasksAssignedTo?: Maybe<TaskUpdateManyWithoutAssignedToInput>;
  commentsCreated?: Maybe<CommentUpdateManyWithoutCreatedByInput>;
  role?: Maybe<Role>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  signupToken?: Maybe<String>;
  signupTokenExpiry?: Maybe<Float>;
  status?: Maybe<UserStatus>;
  subscribedTasks?: Maybe<TaskUpdateManyWithoutSubscribedUsersInput>;
  mentions?: Maybe<CommentUpdateManyWithoutMentionsInput>;
}

export interface AssetCreateInput {
  createdBy: UserCreateOneInput;
  title: String;
  assetUrl: String;
  assetType: AssetType;
}

export interface CustomFieldWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  fieldName?: Maybe<String>;
  fieldName_not?: Maybe<String>;
  fieldName_in?: Maybe<String[] | String>;
  fieldName_not_in?: Maybe<String[] | String>;
  fieldName_lt?: Maybe<String>;
  fieldName_lte?: Maybe<String>;
  fieldName_gt?: Maybe<String>;
  fieldName_gte?: Maybe<String>;
  fieldName_contains?: Maybe<String>;
  fieldName_not_contains?: Maybe<String>;
  fieldName_starts_with?: Maybe<String>;
  fieldName_not_starts_with?: Maybe<String>;
  fieldName_ends_with?: Maybe<String>;
  fieldName_not_ends_with?: Maybe<String>;
  fieldType?: Maybe<FieldType>;
  fieldType_not?: Maybe<FieldType>;
  fieldType_in?: Maybe<FieldType[] | FieldType>;
  fieldType_not_in?: Maybe<FieldType[] | FieldType>;
  fieldValue?: Maybe<String>;
  fieldValue_not?: Maybe<String>;
  fieldValue_in?: Maybe<String[] | String>;
  fieldValue_not_in?: Maybe<String[] | String>;
  fieldValue_lt?: Maybe<String>;
  fieldValue_lte?: Maybe<String>;
  fieldValue_gt?: Maybe<String>;
  fieldValue_gte?: Maybe<String>;
  fieldValue_contains?: Maybe<String>;
  fieldValue_not_contains?: Maybe<String>;
  fieldValue_starts_with?: Maybe<String>;
  fieldValue_not_starts_with?: Maybe<String>;
  fieldValue_ends_with?: Maybe<String>;
  fieldValue_not_ends_with?: Maybe<String>;
  taskListField?: Maybe<TaskListFieldWhereInput>;
  AND?: Maybe<CustomFieldWhereInput[] | CustomFieldWhereInput>;
  OR?: Maybe<CustomFieldWhereInput[] | CustomFieldWhereInput>;
  NOT?: Maybe<CustomFieldWhereInput[] | CustomFieldWhereInput>;
}

export interface UserCreateInput {
  email: String;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  slackHandle?: Maybe<String>;
  tasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
  tasksAssignedTo?: Maybe<TaskCreateManyWithoutAssignedToInput>;
  commentsCreated?: Maybe<CommentCreateManyWithoutCreatedByInput>;
  role?: Maybe<Role>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  signupToken?: Maybe<String>;
  signupTokenExpiry?: Maybe<Float>;
  status?: Maybe<UserStatus>;
  subscribedTasks?: Maybe<TaskCreateManyWithoutSubscribedUsersInput>;
  mentions?: Maybe<CommentCreateManyWithoutMentionsInput>;
}

export interface CommentUpsertWithWhereUniqueWithoutTaskInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutTaskDataInput;
  create: CommentCreateWithoutTaskInput;
}

export interface TaskCreateWithoutCreatedByInput {
  assignedTo?: Maybe<UserCreateOneWithoutTasksAssignedToInput>;
  title: String;
  description: String;
  richText?: Maybe<String>;
  assets?: Maybe<AssetCreateManyInput>;
  taskList: TaskListCreateOneWithoutTasksInput;
  comments?: Maybe<CommentCreateManyWithoutTaskInput>;
  dueDate?: Maybe<DateTimeInput>;
  due?: Maybe<TaskDue>;
  customFields?: Maybe<CustomFieldCreateManyInput>;
  status?: Maybe<TaskStatus>;
  priority?: Maybe<TaskPriority>;
  subscribedUsers?: Maybe<UserCreateManyWithoutSubscribedTasksInput>;
}

export interface UserUpsertWithWhereUniqueWithoutMentionsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutMentionsDataInput;
  create: UserCreateWithoutMentionsInput;
}

export interface UserCreateWithoutTasksAssignedToInput {
  email: String;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  slackHandle?: Maybe<String>;
  tasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
  commentsCreated?: Maybe<CommentCreateManyWithoutCreatedByInput>;
  role?: Maybe<Role>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  signupToken?: Maybe<String>;
  signupTokenExpiry?: Maybe<Float>;
  status?: Maybe<UserStatus>;
  subscribedTasks?: Maybe<TaskCreateManyWithoutSubscribedUsersInput>;
  mentions?: Maybe<CommentCreateManyWithoutMentionsInput>;
}

export interface UserUpdateWithoutMentionsDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  slackHandle?: Maybe<String>;
  tasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
  tasksAssignedTo?: Maybe<TaskUpdateManyWithoutAssignedToInput>;
  commentsCreated?: Maybe<CommentUpdateManyWithoutCreatedByInput>;
  role?: Maybe<Role>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  signupToken?: Maybe<String>;
  signupTokenExpiry?: Maybe<Float>;
  status?: Maybe<UserStatus>;
  subscribedTasks?: Maybe<TaskUpdateManyWithoutSubscribedUsersInput>;
}

export interface CommentCreateWithoutCreatedByInput {
  comment: String;
  richText?: Maybe<String>;
  assets?: Maybe<AssetCreateManyInput>;
  task: TaskCreateOneWithoutCommentsInput;
  mentions?: Maybe<UserCreateManyWithoutMentionsInput>;
}

export interface TaskListUpdateWithoutTasksDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  taskListFields?: Maybe<TaskListFieldUpdateManyWithoutTaskListInput>;
  slug?: Maybe<String>;
  color?: Maybe<String>;
}

export interface TaskCreateOneWithoutCommentsInput {
  create?: Maybe<TaskCreateWithoutCommentsInput>;
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface TaskListFieldUpdateManyWithoutTaskListInput {
  create?: Maybe<
    | TaskListFieldCreateWithoutTaskListInput[]
    | TaskListFieldCreateWithoutTaskListInput
  >;
  delete?: Maybe<
    TaskListFieldWhereUniqueInput[] | TaskListFieldWhereUniqueInput
  >;
  connect?: Maybe<
    TaskListFieldWhereUniqueInput[] | TaskListFieldWhereUniqueInput
  >;
  set?: Maybe<TaskListFieldWhereUniqueInput[] | TaskListFieldWhereUniqueInput>;
  disconnect?: Maybe<
    TaskListFieldWhereUniqueInput[] | TaskListFieldWhereUniqueInput
  >;
  update?: Maybe<
    | TaskListFieldUpdateWithWhereUniqueWithoutTaskListInput[]
    | TaskListFieldUpdateWithWhereUniqueWithoutTaskListInput
  >;
  upsert?: Maybe<
    | TaskListFieldUpsertWithWhereUniqueWithoutTaskListInput[]
    | TaskListFieldUpsertWithWhereUniqueWithoutTaskListInput
  >;
  deleteMany?: Maybe<
    TaskListFieldScalarWhereInput[] | TaskListFieldScalarWhereInput
  >;
  updateMany?: Maybe<
    | TaskListFieldUpdateManyWithWhereNestedInput[]
    | TaskListFieldUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateOneWithoutTasksCreatedInput {
  create?: Maybe<UserCreateWithoutTasksCreatedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TaskListFieldUpdateWithWhereUniqueWithoutTaskListInput {
  where: TaskListFieldWhereUniqueInput;
  data: TaskListFieldUpdateWithoutTaskListDataInput;
}

export interface TaskCreateManyWithoutAssignedToInput {
  create?: Maybe<
    TaskCreateWithoutAssignedToInput[] | TaskCreateWithoutAssignedToInput
  >;
  connect?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
}

export interface TaskListFieldUpdateWithoutTaskListDataInput {
  fieldName?: Maybe<String>;
  fieldType?: Maybe<FieldType>;
}

export interface TaskListCreateOneWithoutTasksInput {
  create?: Maybe<TaskListCreateWithoutTasksInput>;
  connect?: Maybe<TaskListWhereUniqueInput>;
}

export interface TaskListFieldUpsertWithWhereUniqueWithoutTaskListInput {
  where: TaskListFieldWhereUniqueInput;
  update: TaskListFieldUpdateWithoutTaskListDataInput;
  create: TaskListFieldCreateWithoutTaskListInput;
}

export interface TaskListFieldCreateManyWithoutTaskListInput {
  create?: Maybe<
    | TaskListFieldCreateWithoutTaskListInput[]
    | TaskListFieldCreateWithoutTaskListInput
  >;
  connect?: Maybe<
    TaskListFieldWhereUniqueInput[] | TaskListFieldWhereUniqueInput
  >;
}

export interface TaskListFieldScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  fieldName?: Maybe<String>;
  fieldName_not?: Maybe<String>;
  fieldName_in?: Maybe<String[] | String>;
  fieldName_not_in?: Maybe<String[] | String>;
  fieldName_lt?: Maybe<String>;
  fieldName_lte?: Maybe<String>;
  fieldName_gt?: Maybe<String>;
  fieldName_gte?: Maybe<String>;
  fieldName_contains?: Maybe<String>;
  fieldName_not_contains?: Maybe<String>;
  fieldName_starts_with?: Maybe<String>;
  fieldName_not_starts_with?: Maybe<String>;
  fieldName_ends_with?: Maybe<String>;
  fieldName_not_ends_with?: Maybe<String>;
  fieldType?: Maybe<FieldType>;
  fieldType_not?: Maybe<FieldType>;
  fieldType_in?: Maybe<FieldType[] | FieldType>;
  fieldType_not_in?: Maybe<FieldType[] | FieldType>;
  AND?: Maybe<TaskListFieldScalarWhereInput[] | TaskListFieldScalarWhereInput>;
  OR?: Maybe<TaskListFieldScalarWhereInput[] | TaskListFieldScalarWhereInput>;
  NOT?: Maybe<TaskListFieldScalarWhereInput[] | TaskListFieldScalarWhereInput>;
}

export interface CommentCreateManyWithoutTaskInput {
  create?: Maybe<
    CommentCreateWithoutTaskInput[] | CommentCreateWithoutTaskInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface TaskListFieldUpdateManyWithWhereNestedInput {
  where: TaskListFieldScalarWhereInput;
  data: TaskListFieldUpdateManyDataInput;
}

export interface UserCreateOneWithoutCommentsCreatedInput {
  create?: Maybe<UserCreateWithoutCommentsCreatedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TaskListFieldUpdateManyDataInput {
  fieldName?: Maybe<String>;
  fieldType?: Maybe<FieldType>;
}

export interface TaskCreateManyWithoutSubscribedUsersInput {
  create?: Maybe<
    | TaskCreateWithoutSubscribedUsersInput[]
    | TaskCreateWithoutSubscribedUsersInput
  >;
  connect?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
}

export interface TaskListUpsertWithoutTasksInput {
  update: TaskListUpdateWithoutTasksDataInput;
  create: TaskListCreateWithoutTasksInput;
}

export interface CustomFieldCreateManyInput {
  create?: Maybe<CustomFieldCreateInput[] | CustomFieldCreateInput>;
  connect?: Maybe<CustomFieldWhereUniqueInput[] | CustomFieldWhereUniqueInput>;
}

export interface CommentUpdateManyWithoutTaskInput {
  create?: Maybe<
    CommentCreateWithoutTaskInput[] | CommentCreateWithoutTaskInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutTaskInput[]
    | CommentUpdateWithWhereUniqueWithoutTaskInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutTaskInput[]
    | CommentUpsertWithWhereUniqueWithoutTaskInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface TaskListFieldCreateOneInput {
  create?: Maybe<TaskListFieldCreateInput>;
  connect?: Maybe<TaskListFieldWhereUniqueInput>;
}

export interface CommentUpdateWithWhereUniqueWithoutTaskInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutTaskDataInput;
}

export interface TaskListCreateOneWithoutTaskListFieldsInput {
  create?: Maybe<TaskListCreateWithoutTaskListFieldsInput>;
  connect?: Maybe<TaskListWhereUniqueInput>;
}

export interface CommentUpdateWithoutTaskDataInput {
  comment?: Maybe<String>;
  richText?: Maybe<String>;
  createdBy?: Maybe<UserUpdateOneRequiredWithoutCommentsCreatedInput>;
  assets?: Maybe<AssetUpdateManyInput>;
  mentions?: Maybe<UserUpdateManyWithoutMentionsInput>;
}

export interface TaskCreateManyWithoutTaskListInput {
  create?: Maybe<
    TaskCreateWithoutTaskListInput[] | TaskCreateWithoutTaskListInput
  >;
  connect?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
}

export interface UserUpdateOneRequiredWithoutCommentsCreatedInput {
  create?: Maybe<UserCreateWithoutCommentsCreatedInput>;
  update?: Maybe<UserUpdateWithoutCommentsCreatedDataInput>;
  upsert?: Maybe<UserUpsertWithoutCommentsCreatedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateManyWithoutSubscribedTasksInput {
  create?: Maybe<
    | UserCreateWithoutSubscribedTasksInput[]
    | UserCreateWithoutSubscribedTasksInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCommentsCreatedDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  slackHandle?: Maybe<String>;
  tasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
  tasksAssignedTo?: Maybe<TaskUpdateManyWithoutAssignedToInput>;
  role?: Maybe<Role>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  signupToken?: Maybe<String>;
  signupTokenExpiry?: Maybe<Float>;
  status?: Maybe<UserStatus>;
  subscribedTasks?: Maybe<TaskUpdateManyWithoutSubscribedUsersInput>;
  mentions?: Maybe<CommentUpdateManyWithoutMentionsInput>;
}

export interface CommentCreateManyWithoutMentionsInput {
  create?: Maybe<
    CommentCreateWithoutMentionsInput[] | CommentCreateWithoutMentionsInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface TaskUpdateManyWithoutSubscribedUsersInput {
  create?: Maybe<
    | TaskCreateWithoutSubscribedUsersInput[]
    | TaskCreateWithoutSubscribedUsersInput
  >;
  delete?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  connect?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  set?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  disconnect?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  update?: Maybe<
    | TaskUpdateWithWhereUniqueWithoutSubscribedUsersInput[]
    | TaskUpdateWithWhereUniqueWithoutSubscribedUsersInput
  >;
  upsert?: Maybe<
    | TaskUpsertWithWhereUniqueWithoutSubscribedUsersInput[]
    | TaskUpsertWithWhereUniqueWithoutSubscribedUsersInput
  >;
  deleteMany?: Maybe<TaskScalarWhereInput[] | TaskScalarWhereInput>;
  updateMany?: Maybe<
    TaskUpdateManyWithWhereNestedInput[] | TaskUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateManyWithoutMentionsInput {
  create?: Maybe<
    UserCreateWithoutMentionsInput[] | UserCreateWithoutMentionsInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface TaskUpdateWithWhereUniqueWithoutSubscribedUsersInput {
  where: TaskWhereUniqueInput;
  data: TaskUpdateWithoutSubscribedUsersDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface TaskUpdateWithoutSubscribedUsersDataInput {
  createdBy?: Maybe<UserUpdateOneRequiredWithoutTasksCreatedInput>;
  assignedTo?: Maybe<UserUpdateOneWithoutTasksAssignedToInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  richText?: Maybe<String>;
  assets?: Maybe<AssetUpdateManyInput>;
  taskList?: Maybe<TaskListUpdateOneRequiredWithoutTasksInput>;
  comments?: Maybe<CommentUpdateManyWithoutTaskInput>;
  dueDate?: Maybe<DateTimeInput>;
  due?: Maybe<TaskDue>;
  customFields?: Maybe<CustomFieldUpdateManyInput>;
  status?: Maybe<TaskStatus>;
  priority?: Maybe<TaskPriority>;
}

export interface TaskListSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TaskListWhereInput>;
  AND?: Maybe<
    TaskListSubscriptionWhereInput[] | TaskListSubscriptionWhereInput
  >;
  OR?: Maybe<TaskListSubscriptionWhereInput[] | TaskListSubscriptionWhereInput>;
  NOT?: Maybe<
    TaskListSubscriptionWhereInput[] | TaskListSubscriptionWhereInput
  >;
}

export interface CustomFieldUpdateManyInput {
  create?: Maybe<CustomFieldCreateInput[] | CustomFieldCreateInput>;
  update?: Maybe<
    | CustomFieldUpdateWithWhereUniqueNestedInput[]
    | CustomFieldUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | CustomFieldUpsertWithWhereUniqueNestedInput[]
    | CustomFieldUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<CustomFieldWhereUniqueInput[] | CustomFieldWhereUniqueInput>;
  connect?: Maybe<CustomFieldWhereUniqueInput[] | CustomFieldWhereUniqueInput>;
  set?: Maybe<CustomFieldWhereUniqueInput[] | CustomFieldWhereUniqueInput>;
  disconnect?: Maybe<
    CustomFieldWhereUniqueInput[] | CustomFieldWhereUniqueInput
  >;
  deleteMany?: Maybe<
    CustomFieldScalarWhereInput[] | CustomFieldScalarWhereInput
  >;
  updateMany?: Maybe<
    | CustomFieldUpdateManyWithWhereNestedInput[]
    | CustomFieldUpdateManyWithWhereNestedInput
  >;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface CustomFieldUpdateWithWhereUniqueNestedInput {
  where: CustomFieldWhereUniqueInput;
  data: CustomFieldUpdateDataInput;
}

export interface TaskListFieldUpdateManyMutationInput {
  fieldName?: Maybe<String>;
  fieldType?: Maybe<FieldType>;
}

export interface CustomFieldUpdateDataInput {
  fieldName?: Maybe<String>;
  fieldType?: Maybe<FieldType>;
  fieldValue?: Maybe<String>;
  taskListField?: Maybe<TaskListFieldUpdateOneRequiredInput>;
}

export interface TaskListUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  taskListFields?: Maybe<TaskListFieldUpdateManyWithoutTaskListInput>;
  tasks?: Maybe<TaskUpdateManyWithoutTaskListInput>;
  slug?: Maybe<String>;
  color?: Maybe<String>;
}

export interface TaskListFieldUpdateOneRequiredInput {
  create?: Maybe<TaskListFieldCreateInput>;
  update?: Maybe<TaskListFieldUpdateDataInput>;
  upsert?: Maybe<TaskListFieldUpsertNestedInput>;
  connect?: Maybe<TaskListFieldWhereUniqueInput>;
}

export interface TaskUpdateInput {
  createdBy?: Maybe<UserUpdateOneRequiredWithoutTasksCreatedInput>;
  assignedTo?: Maybe<UserUpdateOneWithoutTasksAssignedToInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  richText?: Maybe<String>;
  assets?: Maybe<AssetUpdateManyInput>;
  taskList?: Maybe<TaskListUpdateOneRequiredWithoutTasksInput>;
  comments?: Maybe<CommentUpdateManyWithoutTaskInput>;
  dueDate?: Maybe<DateTimeInput>;
  due?: Maybe<TaskDue>;
  customFields?: Maybe<CustomFieldUpdateManyInput>;
  status?: Maybe<TaskStatus>;
  priority?: Maybe<TaskPriority>;
  subscribedUsers?: Maybe<UserUpdateManyWithoutSubscribedTasksInput>;
}

export interface TaskListFieldUpdateDataInput {
  fieldName?: Maybe<String>;
  fieldType?: Maybe<FieldType>;
  taskList?: Maybe<TaskListUpdateOneWithoutTaskListFieldsInput>;
}

export interface CustomFieldUpdateInput {
  fieldName?: Maybe<String>;
  fieldType?: Maybe<FieldType>;
  fieldValue?: Maybe<String>;
  taskListField?: Maybe<TaskListFieldUpdateOneRequiredInput>;
}

export interface TaskListUpdateOneWithoutTaskListFieldsInput {
  create?: Maybe<TaskListCreateWithoutTaskListFieldsInput>;
  update?: Maybe<TaskListUpdateWithoutTaskListFieldsDataInput>;
  upsert?: Maybe<TaskListUpsertWithoutTaskListFieldsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<TaskListWhereUniqueInput>;
}

export interface CommentCreateInput {
  comment: String;
  richText?: Maybe<String>;
  createdBy: UserCreateOneWithoutCommentsCreatedInput;
  assets?: Maybe<AssetCreateManyInput>;
  task: TaskCreateOneWithoutCommentsInput;
  mentions?: Maybe<UserCreateManyWithoutMentionsInput>;
}

export interface TaskListUpdateWithoutTaskListFieldsDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  tasks?: Maybe<TaskUpdateManyWithoutTaskListInput>;
  slug?: Maybe<String>;
  color?: Maybe<String>;
}

export interface TaskUpsertWithWhereUniqueWithoutCreatedByInput {
  where: TaskWhereUniqueInput;
  update: TaskUpdateWithoutCreatedByDataInput;
  create: TaskCreateWithoutCreatedByInput;
}

export interface TaskUpdateManyWithoutTaskListInput {
  create?: Maybe<
    TaskCreateWithoutTaskListInput[] | TaskCreateWithoutTaskListInput
  >;
  delete?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  connect?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  set?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  disconnect?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  update?: Maybe<
    | TaskUpdateWithWhereUniqueWithoutTaskListInput[]
    | TaskUpdateWithWhereUniqueWithoutTaskListInput
  >;
  upsert?: Maybe<
    | TaskUpsertWithWhereUniqueWithoutTaskListInput[]
    | TaskUpsertWithWhereUniqueWithoutTaskListInput
  >;
  deleteMany?: Maybe<TaskScalarWhereInput[] | TaskScalarWhereInput>;
  updateMany?: Maybe<
    TaskUpdateManyWithWhereNestedInput[] | TaskUpdateManyWithWhereNestedInput
  >;
}

export interface TaskUpsertWithoutCommentsInput {
  update: TaskUpdateWithoutCommentsDataInput;
  create: TaskCreateWithoutCommentsInput;
}

export interface TaskUpdateWithWhereUniqueWithoutTaskListInput {
  where: TaskWhereUniqueInput;
  data: TaskUpdateWithoutTaskListDataInput;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TaskUpdateWithoutTaskListDataInput {
  createdBy?: Maybe<UserUpdateOneRequiredWithoutTasksCreatedInput>;
  assignedTo?: Maybe<UserUpdateOneWithoutTasksAssignedToInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  richText?: Maybe<String>;
  assets?: Maybe<AssetUpdateManyInput>;
  comments?: Maybe<CommentUpdateManyWithoutTaskInput>;
  dueDate?: Maybe<DateTimeInput>;
  due?: Maybe<TaskDue>;
  customFields?: Maybe<CustomFieldUpdateManyInput>;
  status?: Maybe<TaskStatus>;
  priority?: Maybe<TaskPriority>;
  subscribedUsers?: Maybe<UserUpdateManyWithoutSubscribedTasksInput>;
}

export interface UserCreateOneWithoutTasksAssignedToInput {
  create?: Maybe<UserCreateWithoutTasksAssignedToInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateManyWithoutSubscribedTasksInput {
  create?: Maybe<
    | UserCreateWithoutSubscribedTasksInput[]
    | UserCreateWithoutSubscribedTasksInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutSubscribedTasksInput[]
    | UserUpdateWithWhereUniqueWithoutSubscribedTasksInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutSubscribedTasksInput[]
    | UserUpsertWithWhereUniqueWithoutSubscribedTasksInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface AssetCreateManyInput {
  create?: Maybe<AssetCreateInput[] | AssetCreateInput>;
  connect?: Maybe<AssetWhereUniqueInput[] | AssetWhereUniqueInput>;
}

export interface UserUpdateWithWhereUniqueWithoutSubscribedTasksInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutSubscribedTasksDataInput;
}

export interface UserCreateWithoutTasksCreatedInput {
  email: String;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  slackHandle?: Maybe<String>;
  tasksAssignedTo?: Maybe<TaskCreateManyWithoutAssignedToInput>;
  commentsCreated?: Maybe<CommentCreateManyWithoutCreatedByInput>;
  role?: Maybe<Role>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  signupToken?: Maybe<String>;
  signupTokenExpiry?: Maybe<Float>;
  status?: Maybe<UserStatus>;
  subscribedTasks?: Maybe<TaskCreateManyWithoutSubscribedUsersInput>;
  mentions?: Maybe<CommentCreateManyWithoutMentionsInput>;
}

export interface UserUpdateWithoutSubscribedTasksDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  slackHandle?: Maybe<String>;
  tasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
  tasksAssignedTo?: Maybe<TaskUpdateManyWithoutAssignedToInput>;
  commentsCreated?: Maybe<CommentUpdateManyWithoutCreatedByInput>;
  role?: Maybe<Role>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  signupToken?: Maybe<String>;
  signupTokenExpiry?: Maybe<Float>;
  status?: Maybe<UserStatus>;
  mentions?: Maybe<CommentUpdateManyWithoutMentionsInput>;
}

export interface TaskListCreateWithoutTasksInput {
  name: String;
  description?: Maybe<String>;
  taskListFields?: Maybe<TaskListFieldCreateManyWithoutTaskListInput>;
  slug: String;
  color?: Maybe<String>;
}

export interface CommentUpdateManyWithoutMentionsInput {
  create?: Maybe<
    CommentCreateWithoutMentionsInput[] | CommentCreateWithoutMentionsInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutMentionsInput[]
    | CommentUpdateWithWhereUniqueWithoutMentionsInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutMentionsInput[]
    | CommentUpsertWithWhereUniqueWithoutMentionsInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentCreateWithoutTaskInput {
  comment: String;
  richText?: Maybe<String>;
  createdBy: UserCreateOneWithoutCommentsCreatedInput;
  assets?: Maybe<AssetCreateManyInput>;
  mentions?: Maybe<UserCreateManyWithoutMentionsInput>;
}

export interface CommentUpdateWithWhereUniqueWithoutMentionsInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutMentionsDataInput;
}

export interface TaskCreateWithoutSubscribedUsersInput {
  createdBy: UserCreateOneWithoutTasksCreatedInput;
  assignedTo?: Maybe<UserCreateOneWithoutTasksAssignedToInput>;
  title: String;
  description: String;
  richText?: Maybe<String>;
  assets?: Maybe<AssetCreateManyInput>;
  taskList: TaskListCreateOneWithoutTasksInput;
  comments?: Maybe<CommentCreateManyWithoutTaskInput>;
  dueDate?: Maybe<DateTimeInput>;
  due?: Maybe<TaskDue>;
  customFields?: Maybe<CustomFieldCreateManyInput>;
  status?: Maybe<TaskStatus>;
  priority?: Maybe<TaskPriority>;
}

export interface CommentUpdateWithoutMentionsDataInput {
  comment?: Maybe<String>;
  richText?: Maybe<String>;
  createdBy?: Maybe<UserUpdateOneRequiredWithoutCommentsCreatedInput>;
  assets?: Maybe<AssetUpdateManyInput>;
  task?: Maybe<TaskUpdateOneRequiredWithoutCommentsInput>;
}

export interface TaskListFieldCreateInput {
  fieldName: String;
  fieldType: FieldType;
  taskList?: Maybe<TaskListCreateOneWithoutTaskListFieldsInput>;
}

export interface CommentUpsertWithWhereUniqueWithoutMentionsInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutMentionsDataInput;
  create: CommentCreateWithoutMentionsInput;
}

export interface TaskCreateWithoutTaskListInput {
  createdBy: UserCreateOneWithoutTasksCreatedInput;
  assignedTo?: Maybe<UserCreateOneWithoutTasksAssignedToInput>;
  title: String;
  description: String;
  richText?: Maybe<String>;
  assets?: Maybe<AssetCreateManyInput>;
  comments?: Maybe<CommentCreateManyWithoutTaskInput>;
  dueDate?: Maybe<DateTimeInput>;
  due?: Maybe<TaskDue>;
  customFields?: Maybe<CustomFieldCreateManyInput>;
  status?: Maybe<TaskStatus>;
  priority?: Maybe<TaskPriority>;
  subscribedUsers?: Maybe<UserCreateManyWithoutSubscribedTasksInput>;
}

export interface CommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  comment?: Maybe<String>;
  comment_not?: Maybe<String>;
  comment_in?: Maybe<String[] | String>;
  comment_not_in?: Maybe<String[] | String>;
  comment_lt?: Maybe<String>;
  comment_lte?: Maybe<String>;
  comment_gt?: Maybe<String>;
  comment_gte?: Maybe<String>;
  comment_contains?: Maybe<String>;
  comment_not_contains?: Maybe<String>;
  comment_starts_with?: Maybe<String>;
  comment_not_starts_with?: Maybe<String>;
  comment_ends_with?: Maybe<String>;
  comment_not_ends_with?: Maybe<String>;
  richText?: Maybe<String>;
  richText_not?: Maybe<String>;
  richText_in?: Maybe<String[] | String>;
  richText_not_in?: Maybe<String[] | String>;
  richText_lt?: Maybe<String>;
  richText_lte?: Maybe<String>;
  richText_gt?: Maybe<String>;
  richText_gte?: Maybe<String>;
  richText_contains?: Maybe<String>;
  richText_not_contains?: Maybe<String>;
  richText_starts_with?: Maybe<String>;
  richText_not_starts_with?: Maybe<String>;
  richText_ends_with?: Maybe<String>;
  richText_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface CommentCreateWithoutMentionsInput {
  comment: String;
  richText?: Maybe<String>;
  createdBy: UserCreateOneWithoutCommentsCreatedInput;
  assets?: Maybe<AssetCreateManyInput>;
  task: TaskCreateOneWithoutCommentsInput;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface TaskListFieldSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TaskListFieldWhereInput>;
  AND?: Maybe<
    TaskListFieldSubscriptionWhereInput[] | TaskListFieldSubscriptionWhereInput
  >;
  OR?: Maybe<
    TaskListFieldSubscriptionWhereInput[] | TaskListFieldSubscriptionWhereInput
  >;
  NOT?: Maybe<
    TaskListFieldSubscriptionWhereInput[] | TaskListFieldSubscriptionWhereInput
  >;
}

export interface CommentUpdateManyDataInput {
  comment?: Maybe<String>;
  richText?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  slackHandle?: Maybe<String>;
  role?: Maybe<Role>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  signupToken?: Maybe<String>;
  signupTokenExpiry?: Maybe<Float>;
  status?: Maybe<UserStatus>;
}

export interface UserUpsertWithWhereUniqueWithoutSubscribedTasksInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutSubscribedTasksDataInput;
  create: UserCreateWithoutSubscribedTasksInput;
}

export interface TaskListCreateInput {
  name: String;
  description?: Maybe<String>;
  taskListFields?: Maybe<TaskListFieldCreateManyWithoutTaskListInput>;
  tasks?: Maybe<TaskCreateManyWithoutTaskListInput>;
  slug: String;
  color?: Maybe<String>;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  slackHandle?: Maybe<String>;
  slackHandle_not?: Maybe<String>;
  slackHandle_in?: Maybe<String[] | String>;
  slackHandle_not_in?: Maybe<String[] | String>;
  slackHandle_lt?: Maybe<String>;
  slackHandle_lte?: Maybe<String>;
  slackHandle_gt?: Maybe<String>;
  slackHandle_gte?: Maybe<String>;
  slackHandle_contains?: Maybe<String>;
  slackHandle_not_contains?: Maybe<String>;
  slackHandle_starts_with?: Maybe<String>;
  slackHandle_not_starts_with?: Maybe<String>;
  slackHandle_ends_with?: Maybe<String>;
  slackHandle_not_ends_with?: Maybe<String>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetToken_not?: Maybe<String>;
  resetToken_in?: Maybe<String[] | String>;
  resetToken_not_in?: Maybe<String[] | String>;
  resetToken_lt?: Maybe<String>;
  resetToken_lte?: Maybe<String>;
  resetToken_gt?: Maybe<String>;
  resetToken_gte?: Maybe<String>;
  resetToken_contains?: Maybe<String>;
  resetToken_not_contains?: Maybe<String>;
  resetToken_starts_with?: Maybe<String>;
  resetToken_not_starts_with?: Maybe<String>;
  resetToken_ends_with?: Maybe<String>;
  resetToken_not_ends_with?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  resetTokenExpiry_not?: Maybe<Float>;
  resetTokenExpiry_in?: Maybe<Float[] | Float>;
  resetTokenExpiry_not_in?: Maybe<Float[] | Float>;
  resetTokenExpiry_lt?: Maybe<Float>;
  resetTokenExpiry_lte?: Maybe<Float>;
  resetTokenExpiry_gt?: Maybe<Float>;
  resetTokenExpiry_gte?: Maybe<Float>;
  signupToken?: Maybe<String>;
  signupToken_not?: Maybe<String>;
  signupToken_in?: Maybe<String[] | String>;
  signupToken_not_in?: Maybe<String[] | String>;
  signupToken_lt?: Maybe<String>;
  signupToken_lte?: Maybe<String>;
  signupToken_gt?: Maybe<String>;
  signupToken_gte?: Maybe<String>;
  signupToken_contains?: Maybe<String>;
  signupToken_not_contains?: Maybe<String>;
  signupToken_starts_with?: Maybe<String>;
  signupToken_not_starts_with?: Maybe<String>;
  signupToken_ends_with?: Maybe<String>;
  signupToken_not_ends_with?: Maybe<String>;
  signupTokenExpiry?: Maybe<Float>;
  signupTokenExpiry_not?: Maybe<Float>;
  signupTokenExpiry_in?: Maybe<Float[] | Float>;
  signupTokenExpiry_not_in?: Maybe<Float[] | Float>;
  signupTokenExpiry_lt?: Maybe<Float>;
  signupTokenExpiry_lte?: Maybe<Float>;
  signupTokenExpiry_gt?: Maybe<Float>;
  signupTokenExpiry_gte?: Maybe<Float>;
  status?: Maybe<UserStatus>;
  status_not?: Maybe<UserStatus>;
  status_in?: Maybe<UserStatus[] | UserStatus>;
  status_not_in?: Maybe<UserStatus[] | UserStatus>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface CommentUpdateManyMutationInput {
  comment?: Maybe<String>;
  richText?: Maybe<String>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
  signupToken?: Maybe<String>;
}>;

export interface UserUpdateManyDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  slackHandle?: Maybe<String>;
  role?: Maybe<Role>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  signupToken?: Maybe<String>;
  signupTokenExpiry?: Maybe<Float>;
  status?: Maybe<UserStatus>;
}

export interface TaskCreateManyWithoutCreatedByInput {
  create?: Maybe<
    TaskCreateWithoutCreatedByInput[] | TaskCreateWithoutCreatedByInput
  >;
  connect?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
}

export interface TaskUpsertWithWhereUniqueWithoutTaskListInput {
  where: TaskWhereUniqueInput;
  update: TaskUpdateWithoutTaskListDataInput;
  create: TaskCreateWithoutTaskListInput;
}

export interface TaskCreateWithoutCommentsInput {
  createdBy: UserCreateOneWithoutTasksCreatedInput;
  assignedTo?: Maybe<UserCreateOneWithoutTasksAssignedToInput>;
  title: String;
  description: String;
  richText?: Maybe<String>;
  assets?: Maybe<AssetCreateManyInput>;
  taskList: TaskListCreateOneWithoutTasksInput;
  dueDate?: Maybe<DateTimeInput>;
  due?: Maybe<TaskDue>;
  customFields?: Maybe<CustomFieldCreateManyInput>;
  status?: Maybe<TaskStatus>;
  priority?: Maybe<TaskPriority>;
  subscribedUsers?: Maybe<UserCreateManyWithoutSubscribedTasksInput>;
}

export interface TaskScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  richText?: Maybe<String>;
  richText_not?: Maybe<String>;
  richText_in?: Maybe<String[] | String>;
  richText_not_in?: Maybe<String[] | String>;
  richText_lt?: Maybe<String>;
  richText_lte?: Maybe<String>;
  richText_gt?: Maybe<String>;
  richText_gte?: Maybe<String>;
  richText_contains?: Maybe<String>;
  richText_not_contains?: Maybe<String>;
  richText_starts_with?: Maybe<String>;
  richText_not_starts_with?: Maybe<String>;
  richText_ends_with?: Maybe<String>;
  richText_not_ends_with?: Maybe<String>;
  dueDate?: Maybe<DateTimeInput>;
  dueDate_not?: Maybe<DateTimeInput>;
  dueDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dueDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dueDate_lt?: Maybe<DateTimeInput>;
  dueDate_lte?: Maybe<DateTimeInput>;
  dueDate_gt?: Maybe<DateTimeInput>;
  dueDate_gte?: Maybe<DateTimeInput>;
  due?: Maybe<TaskDue>;
  due_not?: Maybe<TaskDue>;
  due_in?: Maybe<TaskDue[] | TaskDue>;
  due_not_in?: Maybe<TaskDue[] | TaskDue>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  status?: Maybe<TaskStatus>;
  status_not?: Maybe<TaskStatus>;
  status_in?: Maybe<TaskStatus[] | TaskStatus>;
  status_not_in?: Maybe<TaskStatus[] | TaskStatus>;
  priority?: Maybe<TaskPriority>;
  priority_not?: Maybe<TaskPriority>;
  priority_in?: Maybe<TaskPriority[] | TaskPriority>;
  priority_not_in?: Maybe<TaskPriority[] | TaskPriority>;
  AND?: Maybe<TaskScalarWhereInput[] | TaskScalarWhereInput>;
  OR?: Maybe<TaskScalarWhereInput[] | TaskScalarWhereInput>;
  NOT?: Maybe<TaskScalarWhereInput[] | TaskScalarWhereInput>;
}

export interface TaskListFieldCreateWithoutTaskListInput {
  fieldName: String;
  fieldType: FieldType;
}

export interface TaskUpdateManyWithWhereNestedInput {
  where: TaskScalarWhereInput;
  data: TaskUpdateManyDataInput;
}

export interface CustomFieldCreateInput {
  fieldName: String;
  fieldType: FieldType;
  fieldValue: String;
  taskListField: TaskListFieldCreateOneInput;
}

export interface TaskUpdateManyDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  richText?: Maybe<String>;
  dueDate?: Maybe<DateTimeInput>;
  due?: Maybe<TaskDue>;
  status?: Maybe<TaskStatus>;
  priority?: Maybe<TaskPriority>;
}

export interface UserCreateWithoutSubscribedTasksInput {
  email: String;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  slackHandle?: Maybe<String>;
  tasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
  tasksAssignedTo?: Maybe<TaskCreateManyWithoutAssignedToInput>;
  commentsCreated?: Maybe<CommentCreateManyWithoutCreatedByInput>;
  role?: Maybe<Role>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  signupToken?: Maybe<String>;
  signupTokenExpiry?: Maybe<Float>;
  status?: Maybe<UserStatus>;
  mentions?: Maybe<CommentCreateManyWithoutMentionsInput>;
}

export interface TaskListUpsertWithoutTaskListFieldsInput {
  update: TaskListUpdateWithoutTaskListFieldsDataInput;
  create: TaskListCreateWithoutTaskListFieldsInput;
}

export interface TaskSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TaskWhereInput>;
  AND?: Maybe<TaskSubscriptionWhereInput[] | TaskSubscriptionWhereInput>;
  OR?: Maybe<TaskSubscriptionWhereInput[] | TaskSubscriptionWhereInput>;
  NOT?: Maybe<TaskSubscriptionWhereInput[] | TaskSubscriptionWhereInput>;
}

export interface TaskListFieldUpsertNestedInput {
  update: TaskListFieldUpdateDataInput;
  create: TaskListFieldCreateInput;
}

export interface TaskCreateInput {
  createdBy: UserCreateOneWithoutTasksCreatedInput;
  assignedTo?: Maybe<UserCreateOneWithoutTasksAssignedToInput>;
  title: String;
  description: String;
  richText?: Maybe<String>;
  assets?: Maybe<AssetCreateManyInput>;
  taskList: TaskListCreateOneWithoutTasksInput;
  comments?: Maybe<CommentCreateManyWithoutTaskInput>;
  dueDate?: Maybe<DateTimeInput>;
  due?: Maybe<TaskDue>;
  customFields?: Maybe<CustomFieldCreateManyInput>;
  status?: Maybe<TaskStatus>;
  priority?: Maybe<TaskPriority>;
  subscribedUsers?: Maybe<UserCreateManyWithoutSubscribedTasksInput>;
}

export interface CustomFieldUpsertWithWhereUniqueNestedInput {
  where: CustomFieldWhereUniqueInput;
  update: CustomFieldUpdateDataInput;
  create: CustomFieldCreateInput;
}

export interface TaskCreateWithoutAssignedToInput {
  createdBy: UserCreateOneWithoutTasksCreatedInput;
  title: String;
  description: String;
  richText?: Maybe<String>;
  assets?: Maybe<AssetCreateManyInput>;
  taskList: TaskListCreateOneWithoutTasksInput;
  comments?: Maybe<CommentCreateManyWithoutTaskInput>;
  dueDate?: Maybe<DateTimeInput>;
  due?: Maybe<TaskDue>;
  customFields?: Maybe<CustomFieldCreateManyInput>;
  status?: Maybe<TaskStatus>;
  priority?: Maybe<TaskPriority>;
  subscribedUsers?: Maybe<UserCreateManyWithoutSubscribedTasksInput>;
}

export interface CustomFieldScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  fieldName?: Maybe<String>;
  fieldName_not?: Maybe<String>;
  fieldName_in?: Maybe<String[] | String>;
  fieldName_not_in?: Maybe<String[] | String>;
  fieldName_lt?: Maybe<String>;
  fieldName_lte?: Maybe<String>;
  fieldName_gt?: Maybe<String>;
  fieldName_gte?: Maybe<String>;
  fieldName_contains?: Maybe<String>;
  fieldName_not_contains?: Maybe<String>;
  fieldName_starts_with?: Maybe<String>;
  fieldName_not_starts_with?: Maybe<String>;
  fieldName_ends_with?: Maybe<String>;
  fieldName_not_ends_with?: Maybe<String>;
  fieldType?: Maybe<FieldType>;
  fieldType_not?: Maybe<FieldType>;
  fieldType_in?: Maybe<FieldType[] | FieldType>;
  fieldType_not_in?: Maybe<FieldType[] | FieldType>;
  fieldValue?: Maybe<String>;
  fieldValue_not?: Maybe<String>;
  fieldValue_in?: Maybe<String[] | String>;
  fieldValue_not_in?: Maybe<String[] | String>;
  fieldValue_lt?: Maybe<String>;
  fieldValue_lte?: Maybe<String>;
  fieldValue_gt?: Maybe<String>;
  fieldValue_gte?: Maybe<String>;
  fieldValue_contains?: Maybe<String>;
  fieldValue_not_contains?: Maybe<String>;
  fieldValue_starts_with?: Maybe<String>;
  fieldValue_not_starts_with?: Maybe<String>;
  fieldValue_ends_with?: Maybe<String>;
  fieldValue_not_ends_with?: Maybe<String>;
  AND?: Maybe<CustomFieldScalarWhereInput[] | CustomFieldScalarWhereInput>;
  OR?: Maybe<CustomFieldScalarWhereInput[] | CustomFieldScalarWhereInput>;
  NOT?: Maybe<CustomFieldScalarWhereInput[] | CustomFieldScalarWhereInput>;
}

export interface TaskListCreateWithoutTaskListFieldsInput {
  name: String;
  description?: Maybe<String>;
  tasks?: Maybe<TaskCreateManyWithoutTaskListInput>;
  slug: String;
  color?: Maybe<String>;
}

export interface CustomFieldUpdateManyWithWhereNestedInput {
  where: CustomFieldScalarWhereInput;
  data: CustomFieldUpdateManyDataInput;
}

export interface TaskListFieldUpdateInput {
  fieldName?: Maybe<String>;
  fieldType?: Maybe<FieldType>;
  taskList?: Maybe<TaskListUpdateOneWithoutTaskListFieldsInput>;
}

export interface UserUpdateManyWithoutMentionsInput {
  create?: Maybe<
    UserCreateWithoutMentionsInput[] | UserCreateWithoutMentionsInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutMentionsInput[]
    | UserUpdateWithWhereUniqueWithoutMentionsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutMentionsInput[]
    | UserUpsertWithWhereUniqueWithoutMentionsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpsertWithoutCommentsCreatedInput {
  update: UserUpdateWithoutCommentsCreatedDataInput;
  create: UserCreateWithoutCommentsCreatedInput;
}

export interface TaskUpsertWithWhereUniqueWithoutSubscribedUsersInput {
  where: TaskWhereUniqueInput;
  update: TaskUpdateWithoutSubscribedUsersDataInput;
  create: TaskCreateWithoutSubscribedUsersInput;
}

export interface CustomFieldUpdateManyDataInput {
  fieldName?: Maybe<String>;
  fieldType?: Maybe<FieldType>;
  fieldValue?: Maybe<String>;
}

export type TaskListFieldWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserCreateWithoutMentionsInput {
  email: String;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  slackHandle?: Maybe<String>;
  tasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
  tasksAssignedTo?: Maybe<TaskCreateManyWithoutAssignedToInput>;
  commentsCreated?: Maybe<CommentCreateManyWithoutCreatedByInput>;
  role?: Maybe<Role>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  signupToken?: Maybe<String>;
  signupTokenExpiry?: Maybe<Float>;
  status?: Maybe<UserStatus>;
  subscribedTasks?: Maybe<TaskCreateManyWithoutSubscribedUsersInput>;
}

export interface UserCreateWithoutCommentsCreatedInput {
  email: String;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  slackHandle?: Maybe<String>;
  tasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
  tasksAssignedTo?: Maybe<TaskCreateManyWithoutAssignedToInput>;
  role?: Maybe<Role>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  signupToken?: Maybe<String>;
  signupTokenExpiry?: Maybe<Float>;
  status?: Maybe<UserStatus>;
  subscribedTasks?: Maybe<TaskCreateManyWithoutSubscribedUsersInput>;
  mentions?: Maybe<CommentCreateManyWithoutMentionsInput>;
}

export interface CommentCreateManyWithoutCreatedByInput {
  create?: Maybe<
    CommentCreateWithoutCreatedByInput[] | CommentCreateWithoutCreatedByInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  role: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status: UserStatus;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  slackHandle: () => Promise<String>;
  role: () => Promise<Role>;
  password: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  signupToken: () => Promise<String>;
  signupTokenExpiry: () => Promise<Float>;
  status: () => Promise<UserStatus>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  slackHandle: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  password: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<Float>>;
  signupToken: () => Promise<AsyncIterator<String>>;
  signupTokenExpiry: () => Promise<AsyncIterator<Float>>;
  status: () => Promise<AsyncIterator<UserStatus>>;
}

export interface AggregateAsset {
  count: Int;
}

export interface AggregateAssetPromise
  extends Promise<AggregateAsset>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAssetSubscription
  extends Promise<AsyncIterator<AggregateAsset>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Task {
  id: ID_Output;
  title: String;
  description: String;
  richText?: String;
  dueDate?: DateTimeOutput;
  due?: TaskDue;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  status: TaskStatus;
  priority?: TaskPriority;
}

export interface TaskPromise extends Promise<Task>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdBy: <T = UserPromise>() => T;
  assignedTo: <T = UserPromise>() => T;
  title: () => Promise<String>;
  description: () => Promise<String>;
  richText: () => Promise<String>;
  assets: <T = FragmentableArray<Asset>>(args?: {
    where?: AssetWhereInput;
    orderBy?: AssetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  taskList: <T = TaskListPromise>() => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  dueDate: () => Promise<DateTimeOutput>;
  due: () => Promise<TaskDue>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  customFields: <T = FragmentableArray<CustomField>>(args?: {
    where?: CustomFieldWhereInput;
    orderBy?: CustomFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  status: () => Promise<TaskStatus>;
  priority: () => Promise<TaskPriority>;
  subscribedUsers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TaskSubscription
  extends Promise<AsyncIterator<Task>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdBy: <T = UserSubscription>() => T;
  assignedTo: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  richText: () => Promise<AsyncIterator<String>>;
  assets: <T = Promise<AsyncIterator<AssetSubscription>>>(args?: {
    where?: AssetWhereInput;
    orderBy?: AssetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  taskList: <T = TaskListSubscription>() => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  dueDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  due: () => Promise<AsyncIterator<TaskDue>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  customFields: <T = Promise<AsyncIterator<CustomFieldSubscription>>>(args?: {
    where?: CustomFieldWhereInput;
    orderBy?: CustomFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  status: () => Promise<AsyncIterator<TaskStatus>>;
  priority: () => Promise<AsyncIterator<TaskPriority>>;
  subscribedUsers: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TaskNullablePromise
  extends Promise<Task | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdBy: <T = UserPromise>() => T;
  assignedTo: <T = UserPromise>() => T;
  title: () => Promise<String>;
  description: () => Promise<String>;
  richText: () => Promise<String>;
  assets: <T = FragmentableArray<Asset>>(args?: {
    where?: AssetWhereInput;
    orderBy?: AssetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  taskList: <T = TaskListPromise>() => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  dueDate: () => Promise<DateTimeOutput>;
  due: () => Promise<TaskDue>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  customFields: <T = FragmentableArray<CustomField>>(args?: {
    where?: CustomFieldWhereInput;
    orderBy?: CustomFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  status: () => Promise<TaskStatus>;
  priority: () => Promise<TaskPriority>;
  subscribedUsers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TaskListPreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
  slug: String;
  color?: String;
}

export interface TaskListPreviousValuesPromise
  extends Promise<TaskListPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  slug: () => Promise<String>;
  color: () => Promise<String>;
}

export interface TaskListPreviousValuesSubscription
  extends Promise<AsyncIterator<TaskListPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  color: () => Promise<AsyncIterator<String>>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface AssetEdge {
  node: Asset;
  cursor: String;
}

export interface AssetEdgePromise extends Promise<AssetEdge>, Fragmentable {
  node: <T = AssetPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AssetEdgeSubscription
  extends Promise<AsyncIterator<AssetEdge>>,
    Fragmentable {
  node: <T = AssetSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TaskList {
  id: ID_Output;
  name: String;
  description?: String;
  slug: String;
  color?: String;
}

export interface TaskListPromise extends Promise<TaskList>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  taskListFields: <T = FragmentableArray<TaskListField>>(args?: {
    where?: TaskListFieldWhereInput;
    orderBy?: TaskListFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tasks: <T = FragmentableArray<Task>>(args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  slug: () => Promise<String>;
  color: () => Promise<String>;
}

export interface TaskListSubscription
  extends Promise<AsyncIterator<TaskList>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  taskListFields: <
    T = Promise<AsyncIterator<TaskListFieldSubscription>>
  >(args?: {
    where?: TaskListFieldWhereInput;
    orderBy?: TaskListFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tasks: <T = Promise<AsyncIterator<TaskSubscription>>>(args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  slug: () => Promise<AsyncIterator<String>>;
  color: () => Promise<AsyncIterator<String>>;
}

export interface TaskListNullablePromise
  extends Promise<TaskList | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  taskListFields: <T = FragmentableArray<TaskListField>>(args?: {
    where?: TaskListFieldWhereInput;
    orderBy?: TaskListFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tasks: <T = FragmentableArray<Task>>(args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  slug: () => Promise<String>;
  color: () => Promise<String>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TaskListFieldPreviousValues {
  id: ID_Output;
  fieldName: String;
  fieldType: FieldType;
}

export interface TaskListFieldPreviousValuesPromise
  extends Promise<TaskListFieldPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fieldName: () => Promise<String>;
  fieldType: () => Promise<FieldType>;
}

export interface TaskListFieldPreviousValuesSubscription
  extends Promise<AsyncIterator<TaskListFieldPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fieldName: () => Promise<AsyncIterator<String>>;
  fieldType: () => Promise<AsyncIterator<FieldType>>;
}

export interface AggregateTaskListField {
  count: Int;
}

export interface AggregateTaskListFieldPromise
  extends Promise<AggregateTaskListField>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTaskListFieldSubscription
  extends Promise<AsyncIterator<AggregateTaskListField>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TaskListFieldSubscriptionPayload {
  mutation: MutationType;
  node: TaskListField;
  updatedFields: String[];
  previousValues: TaskListFieldPreviousValues;
}

export interface TaskListFieldSubscriptionPayloadPromise
  extends Promise<TaskListFieldSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TaskListFieldPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TaskListFieldPreviousValuesPromise>() => T;
}

export interface TaskListFieldSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TaskListFieldSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TaskListFieldSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TaskListFieldPreviousValuesSubscription>() => T;
}

export interface TaskListFieldConnection {
  pageInfo: PageInfo;
  edges: TaskListFieldEdge[];
}

export interface TaskListFieldConnectionPromise
  extends Promise<TaskListFieldConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TaskListFieldEdge>>() => T;
  aggregate: <T = AggregateTaskListFieldPromise>() => T;
}

export interface TaskListFieldConnectionSubscription
  extends Promise<AsyncIterator<TaskListFieldConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TaskListFieldEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTaskListFieldSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Asset {
  id: ID_Output;
  title: String;
  assetUrl: String;
  createdAt: DateTimeOutput;
  assetType: AssetType;
}

export interface AssetPromise extends Promise<Asset>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdBy: <T = UserPromise>() => T;
  title: () => Promise<String>;
  assetUrl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  assetType: () => Promise<AssetType>;
}

export interface AssetSubscription
  extends Promise<AsyncIterator<Asset>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdBy: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  assetUrl: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  assetType: () => Promise<AsyncIterator<AssetType>>;
}

export interface AssetNullablePromise
  extends Promise<Asset | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdBy: <T = UserPromise>() => T;
  title: () => Promise<String>;
  assetUrl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  assetType: () => Promise<AssetType>;
}

export interface TaskListEdge {
  node: TaskList;
  cursor: String;
}

export interface TaskListEdgePromise
  extends Promise<TaskListEdge>,
    Fragmentable {
  node: <T = TaskListPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TaskListEdgeSubscription
  extends Promise<AsyncIterator<TaskListEdge>>,
    Fragmentable {
  node: <T = TaskListSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AssetSubscriptionPayload {
  mutation: MutationType;
  node: Asset;
  updatedFields: String[];
  previousValues: AssetPreviousValues;
}

export interface AssetSubscriptionPayloadPromise
  extends Promise<AssetSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AssetPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AssetPreviousValuesPromise>() => T;
}

export interface AssetSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AssetSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AssetSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AssetPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  email: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  role: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status: UserStatus;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  slackHandle: () => Promise<String>;
  tasksCreated: <T = FragmentableArray<Task>>(args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tasksAssignedTo: <T = FragmentableArray<Task>>(args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  commentsCreated: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  role: () => Promise<Role>;
  password: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  signupToken: () => Promise<String>;
  signupTokenExpiry: () => Promise<Float>;
  status: () => Promise<UserStatus>;
  subscribedTasks: <T = FragmentableArray<Task>>(args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  mentions: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  slackHandle: () => Promise<AsyncIterator<String>>;
  tasksCreated: <T = Promise<AsyncIterator<TaskSubscription>>>(args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tasksAssignedTo: <T = Promise<AsyncIterator<TaskSubscription>>>(args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  commentsCreated: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  role: () => Promise<AsyncIterator<Role>>;
  password: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<Float>>;
  signupToken: () => Promise<AsyncIterator<String>>;
  signupTokenExpiry: () => Promise<AsyncIterator<Float>>;
  status: () => Promise<AsyncIterator<UserStatus>>;
  subscribedTasks: <T = Promise<AsyncIterator<TaskSubscription>>>(args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  mentions: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  slackHandle: () => Promise<String>;
  tasksCreated: <T = FragmentableArray<Task>>(args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tasksAssignedTo: <T = FragmentableArray<Task>>(args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  commentsCreated: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  role: () => Promise<Role>;
  password: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  signupToken: () => Promise<String>;
  signupTokenExpiry: () => Promise<Float>;
  status: () => Promise<UserStatus>;
  subscribedTasks: <T = FragmentableArray<Task>>(args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  mentions: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AssetPreviousValues {
  id: ID_Output;
  title: String;
  assetUrl: String;
  createdAt: DateTimeOutput;
  assetType: AssetType;
}

export interface AssetPreviousValuesPromise
  extends Promise<AssetPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  assetUrl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  assetType: () => Promise<AssetType>;
}

export interface AssetPreviousValuesSubscription
  extends Promise<AsyncIterator<AssetPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  assetUrl: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  assetType: () => Promise<AsyncIterator<AssetType>>;
}

export interface TaskEdge {
  node: Task;
  cursor: String;
}

export interface TaskEdgePromise extends Promise<TaskEdge>, Fragmentable {
  node: <T = TaskPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TaskEdgeSubscription
  extends Promise<AsyncIterator<TaskEdge>>,
    Fragmentable {
  node: <T = TaskSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AssetConnection {
  pageInfo: PageInfo;
  edges: AssetEdge[];
}

export interface AssetConnectionPromise
  extends Promise<AssetConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AssetEdge>>() => T;
  aggregate: <T = AggregateAssetPromise>() => T;
}

export interface AssetConnectionSubscription
  extends Promise<AsyncIterator<AssetConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AssetEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAssetSubscription>() => T;
}

export interface AggregateCustomField {
  count: Int;
}

export interface AggregateCustomFieldPromise
  extends Promise<AggregateCustomField>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCustomFieldSubscription
  extends Promise<AsyncIterator<AggregateCustomField>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CustomFieldConnection {
  pageInfo: PageInfo;
  edges: CustomFieldEdge[];
}

export interface CustomFieldConnectionPromise
  extends Promise<CustomFieldConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CustomFieldEdge>>() => T;
  aggregate: <T = AggregateCustomFieldPromise>() => T;
}

export interface CustomFieldConnectionSubscription
  extends Promise<AsyncIterator<CustomFieldConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CustomFieldEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCustomFieldSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  comment: String;
  richText?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  comment: () => Promise<String>;
  richText: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  comment: () => Promise<AsyncIterator<String>>;
  richText: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CustomField {
  id: ID_Output;
  fieldName: String;
  fieldType: FieldType;
  fieldValue: String;
}

export interface CustomFieldPromise extends Promise<CustomField>, Fragmentable {
  id: () => Promise<ID_Output>;
  fieldName: () => Promise<String>;
  fieldType: () => Promise<FieldType>;
  fieldValue: () => Promise<String>;
  taskListField: <T = TaskListFieldPromise>() => T;
}

export interface CustomFieldSubscription
  extends Promise<AsyncIterator<CustomField>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fieldName: () => Promise<AsyncIterator<String>>;
  fieldType: () => Promise<AsyncIterator<FieldType>>;
  fieldValue: () => Promise<AsyncIterator<String>>;
  taskListField: <T = TaskListFieldSubscription>() => T;
}

export interface CustomFieldNullablePromise
  extends Promise<CustomField | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fieldName: () => Promise<String>;
  fieldType: () => Promise<FieldType>;
  fieldValue: () => Promise<String>;
  taskListField: <T = TaskListFieldPromise>() => T;
}

export interface TaskListFieldEdge {
  node: TaskListField;
  cursor: String;
}

export interface TaskListFieldEdgePromise
  extends Promise<TaskListFieldEdge>,
    Fragmentable {
  node: <T = TaskListFieldPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TaskListFieldEdgeSubscription
  extends Promise<AsyncIterator<TaskListFieldEdge>>,
    Fragmentable {
  node: <T = TaskListFieldSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CustomFieldSubscriptionPayload {
  mutation: MutationType;
  node: CustomField;
  updatedFields: String[];
  previousValues: CustomFieldPreviousValues;
}

export interface CustomFieldSubscriptionPayloadPromise
  extends Promise<CustomFieldSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CustomFieldPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CustomFieldPreviousValuesPromise>() => T;
}

export interface CustomFieldSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CustomFieldSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CustomFieldSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CustomFieldPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface CustomFieldPreviousValues {
  id: ID_Output;
  fieldName: String;
  fieldType: FieldType;
  fieldValue: String;
}

export interface CustomFieldPreviousValuesPromise
  extends Promise<CustomFieldPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fieldName: () => Promise<String>;
  fieldType: () => Promise<FieldType>;
  fieldValue: () => Promise<String>;
}

export interface CustomFieldPreviousValuesSubscription
  extends Promise<AsyncIterator<CustomFieldPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fieldName: () => Promise<AsyncIterator<String>>;
  fieldType: () => Promise<AsyncIterator<FieldType>>;
  fieldValue: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTask {
  count: Int;
}

export interface AggregateTaskPromise
  extends Promise<AggregateTask>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTaskSubscription
  extends Promise<AsyncIterator<AggregateTask>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TaskListField {
  id: ID_Output;
  fieldName: String;
  fieldType: FieldType;
}

export interface TaskListFieldPromise
  extends Promise<TaskListField>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fieldName: () => Promise<String>;
  fieldType: () => Promise<FieldType>;
  taskList: <T = TaskListPromise>() => T;
}

export interface TaskListFieldSubscription
  extends Promise<AsyncIterator<TaskListField>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fieldName: () => Promise<AsyncIterator<String>>;
  fieldType: () => Promise<AsyncIterator<FieldType>>;
  taskList: <T = TaskListSubscription>() => T;
}

export interface TaskListFieldNullablePromise
  extends Promise<TaskListField | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fieldName: () => Promise<String>;
  fieldType: () => Promise<FieldType>;
  taskList: <T = TaskListPromise>() => T;
}

export interface CustomFieldEdge {
  node: CustomField;
  cursor: String;
}

export interface CustomFieldEdgePromise
  extends Promise<CustomFieldEdge>,
    Fragmentable {
  node: <T = CustomFieldPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CustomFieldEdgeSubscription
  extends Promise<AsyncIterator<CustomFieldEdge>>,
    Fragmentable {
  node: <T = CustomFieldSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface TaskListSubscriptionPayload {
  mutation: MutationType;
  node: TaskList;
  updatedFields: String[];
  previousValues: TaskListPreviousValues;
}

export interface TaskListSubscriptionPayloadPromise
  extends Promise<TaskListSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TaskListPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TaskListPreviousValuesPromise>() => T;
}

export interface TaskListSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TaskListSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TaskListSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TaskListPreviousValuesSubscription>() => T;
}

export interface Comment {
  id: ID_Output;
  comment: String;
  richText?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  comment: () => Promise<String>;
  richText: () => Promise<String>;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  assets: <T = FragmentableArray<Asset>>(args?: {
    where?: AssetWhereInput;
    orderBy?: AssetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  task: <T = TaskPromise>() => T;
  mentions: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  comment: () => Promise<AsyncIterator<String>>;
  richText: () => Promise<AsyncIterator<String>>;
  createdBy: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  assets: <T = Promise<AsyncIterator<AssetSubscription>>>(args?: {
    where?: AssetWhereInput;
    orderBy?: AssetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  task: <T = TaskSubscription>() => T;
  mentions: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  comment: () => Promise<String>;
  richText: () => Promise<String>;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  assets: <T = FragmentableArray<Asset>>(args?: {
    where?: AssetWhereInput;
    orderBy?: AssetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  task: <T = TaskPromise>() => T;
  mentions: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TaskPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  richText?: String;
  dueDate?: DateTimeOutput;
  due?: TaskDue;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  status: TaskStatus;
  priority?: TaskPriority;
}

export interface TaskPreviousValuesPromise
  extends Promise<TaskPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  richText: () => Promise<String>;
  dueDate: () => Promise<DateTimeOutput>;
  due: () => Promise<TaskDue>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  status: () => Promise<TaskStatus>;
  priority: () => Promise<TaskPriority>;
}

export interface TaskPreviousValuesSubscription
  extends Promise<AsyncIterator<TaskPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  richText: () => Promise<AsyncIterator<String>>;
  dueDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  due: () => Promise<AsyncIterator<TaskDue>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<TaskStatus>>;
  priority: () => Promise<AsyncIterator<TaskPriority>>;
}

export interface TaskSubscriptionPayload {
  mutation: MutationType;
  node: Task;
  updatedFields: String[];
  previousValues: TaskPreviousValues;
}

export interface TaskSubscriptionPayloadPromise
  extends Promise<TaskSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TaskPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TaskPreviousValuesPromise>() => T;
}

export interface TaskSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TaskSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TaskSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TaskPreviousValuesSubscription>() => T;
}

export interface AggregateTaskList {
  count: Int;
}

export interface AggregateTaskListPromise
  extends Promise<AggregateTaskList>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTaskListSubscription
  extends Promise<AsyncIterator<AggregateTaskList>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TaskConnection {
  pageInfo: PageInfo;
  edges: TaskEdge[];
}

export interface TaskConnectionPromise
  extends Promise<TaskConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TaskEdge>>() => T;
  aggregate: <T = AggregateTaskPromise>() => T;
}

export interface TaskConnectionSubscription
  extends Promise<AsyncIterator<TaskConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TaskEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTaskSubscription>() => T;
}

export interface TaskListConnection {
  pageInfo: PageInfo;
  edges: TaskListEdge[];
}

export interface TaskListConnectionPromise
  extends Promise<TaskListConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TaskListEdge>>() => T;
  aggregate: <T = AggregateTaskListPromise>() => T;
}

export interface TaskListConnectionSubscription
  extends Promise<AsyncIterator<TaskListConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TaskListEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTaskListSubscription>() => T;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "UserStatus",
    embedded: false
  },
  {
    name: "Task",
    embedded: false
  },
  {
    name: "TaskStatus",
    embedded: false
  },
  {
    name: "TaskDue",
    embedded: false
  },
  {
    name: "TaskPriority",
    embedded: false
  },
  {
    name: "CustomField",
    embedded: false
  },
  {
    name: "FieldType",
    embedded: false
  },
  {
    name: "TaskList",
    embedded: false
  },
  {
    name: "TaskListField",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "Asset",
    embedded: false
  },
  {
    name: "AssetType",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
