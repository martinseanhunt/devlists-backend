# BIGQUESTION Is this exposing anythign I don't want to be exposing? 

# import * from './generated/prisma.graphql'

type Query {
  userByToken(token: String!): User
  me: User
  users: [User]
  taskLists: [TaskList]
  taskList(slug: String!): TaskList
  tasks(taskListSlug: String!, excludeStatus: [TaskStatus]): [Task]
  openTasks(taskListSlug: String!): [Task]
  completedTasks(taskListSlug: String!): [Task]
  task(id: ID!): Task
  myOpenTasks: [Task]
  mySubscriptions: [Task]
}

type Mutation {
  createUser(
    email: String! 
    name: String!
    slackHandle: String!
    role: Role
    avatar: String
  ): User

  createTaskList(
    name: String!
    description: String!
    taskListFields: [TaskListFieldCreateWithoutTaskListInput]
    color: String
  ): TaskList

  createTask(
    title: String!
    description: String!
    due: TaskDue!
    dueDate: String
    assignedTo: String
    customFields: [CreateRelatedCustomField]
    taskList: String!
    assets: [CreateRelatedAsset]
  ): Task

  signUp(token: String!, password: String!, avatar: String): User
  
  signIn(email: String!, password: String!): User
  
  signOut: StatusMessage

  updateTaskStatus(id: ID!, status: TaskStatus!): Task

  createComment(comment: String!, task: ID!, notify: [ID]): Comment

  subscribeToTask(task: ID!): Task!

  unsubscribeFromTask(task: ID!): Task!
}

# BIGQUESTION How could I only expose the user email to the front end if the logged in user making the query has a specific role? 

type User {
  id: ID!
  email: String!
  name: String
  slackHandle: String
  role: Role
  status: UserStatus
  avatar: String
}

type StatusMessage {
  message: String
}

type TaskList {
  id: ID!
  name: String!
  description: String
  taskListFields: [TaskListField!]!
  tasks: [Task!]!
  slug: String!
  totalTaskCount: Int
  completedTaskCount: Int
  color: String
}

# BIGQUESTION is creating my own input types here the answer for 
# Creating multiple related nodes within a create Mutation. Otherwise
# I'd have to pass connect: { id: theId } from the frontend and that doesn't 
# feel right. This way I can just pass along the ID and make the connections
# server side.

input CreateRelatedCustomField {
  fieldName: String!
  fieldType: FieldType!
  fieldValue: String!
  taskListField: ID!
}

# Same thing here, I don't want to have to pass the user email along with every asset
# on the front end so creating my own input type seems like the right idea. so I can 
# set createdBy serverside

input CreateRelatedAsset {
  assetUrl: String!
  assetType: AssetType!
  title: String!
}